{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a personal finance management application called \"WealthTrack\" that helps users track their savings and investment instruments including Recurring Deposits (RD), Fixed Deposits (FD), Mutual Funds (MF), Life Insurance (LIC), and other financial instruments. The application provides a comprehensive dashboard for monitoring contributions, due dates, maturity dates, and overall net worth from these investments.\n\n**Recent Enhancement (September 2025)**: The application now supports fully customizable investment types and bill categories, allowing users to create, edit, and delete their own categories through a comprehensive Settings page. These custom types automatically update all dropdowns in the Investment and Bills sections, and users can export/import their complete financial data including custom categories.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Charts**: Recharts for data visualization\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Development**: Hot module replacement with Vite integration\n- **Error Handling**: Centralized error middleware with structured error responses\n\n## Data Storage Solutions\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon Database serverless connection\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Validation**: Zod schemas for runtime type validation and API contract enforcement\n\n## Authentication and Authorization\n- **Current State**: Demo implementation using hardcoded user ID\n- **Session Management**: Prepared for PostgreSQL session store using connect-pg-simple\n- **Security**: CSRF protection and secure session handling (implementation pending)\n\n## Data Models\nThe application uses a five-tier data model:\n- **Users**: Basic user information and authentication\n- **Investment Types**: User-customizable investment categories (replaces hardcoded types)\n- **Bill Categories**: User-customizable bill/expense categories (replaces hardcoded categories)\n- **Investments**: Core investment tracking with dynamic type categorization, payment schedules, and maturity tracking\n- **Bills**: Expense tracking with dynamic category assignment and payment scheduling\n- **Transactions**: Individual payment records linked to investments and bills\n\n## Component Architecture\n- **Design System**: Modular component library with consistent theming and dynamic color generation\n- **Layout**: Responsive design with mobile-first approach\n- **Reusability**: Shared UI components with variant-based styling using class-variance-authority\n- **Settings Interface**: Comprehensive tabbed interface with CRUD operations for custom types and data management\n- **Dynamic Integration**: Investment and Bills pages automatically reflect custom types through API integration\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n## UI and Styling\n- **Radix UI**: Headless UI components for accessibility and functionality\n- **Tailwind CSS**: Utility-first CSS framework\n- **Recharts**: React charting library for data visualization\n- **Lucide React**: Icon library for consistent iconography\n\n## Development and Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n\n## Form and Validation\n- **React Hook Form**: Performant form handling with minimal re-renders\n- **Zod**: Runtime type validation and schema definition\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n## Communication Services\n- **SendGrid**: Email service integration for notifications (configured but not actively used)\n\n## Development Environment\n- **Replit Integration**: Custom plugins for development banner and cartographer\n- **Runtime Error Overlay**: Development error handling and debugging","size_bytes":4608},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/date-utils.ts":{"content":"import { type Bill } from \"@shared/schema\";\n\n// Helper to clamp day to valid range for given month/year\nconst clampDay = (year: number, month: number, day: number) => {\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n  return Math.min(day, daysInMonth);\n};\n\n// UTC-safe date construction to avoid timezone drift\nconst createUTCDate = (year: number, month: number, day: number): Date => {\n  return new Date(Date.UTC(year, month, day));\n};\n\n// UTC-safe start of day to unify timezone handling\nconst utcStartOfDay = (date: Date): Date => {\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = date.getUTCMonth();\n  const utcDay = date.getUTCDate();\n  return new Date(Date.UTC(utcYear, utcMonth, utcDay));\n};\n\n// Get next due date based on bill frequency and proper anchoring\nexport const calculateNextBillDueDate = (bill: Bill, fromDate: Date = new Date(), anchorStart?: Date): Date | null => {\n  if (!bill.dueDay || bill.frequency === 'one_time' || !bill.isActive) {\n    return null;\n  }\n\n  // Always anchor on original schedule (createdAt or explicit anchorStart), never on nextDueDate\n  const scheduleAnchor = anchorStart ? utcStartOfDay(anchorStart) : utcStartOfDay(new Date(bill.createdAt));\n  const anchorYear = scheduleAnchor.getUTCFullYear();\n  const anchorMonth = scheduleAnchor.getUTCMonth();\n  \n  // Compare from the later of schedule anchor or fromDate, in UTC\n  const compareFrom = new Date(Math.max(scheduleAnchor.getTime(), utcStartOfDay(fromDate).getTime()));\n\n  let nextDue: Date | null = null;\n\n  switch (bill.frequency) {\n    case 'monthly': {\n      // Find next month where due date >= compareFrom\n      let targetYear = compareFrom.getUTCFullYear();\n      let targetMonth = compareFrom.getUTCMonth();\n      \n      do {\n        const clampedDay = clampDay(targetYear, targetMonth, bill.dueDay);\n        nextDue = createUTCDate(targetYear, targetMonth, clampedDay);\n        \n        if (nextDue >= compareFrom) break;\n        \n        targetMonth++;\n        if (targetMonth > 11) {\n          targetMonth = 0;\n          targetYear++;\n        }\n      } while (true);\n      break;\n    }\n\n    case 'quarterly': {\n      // Find next quarter cycle from anchor month\n      let k = 0;\n      do {\n        const targetMonth = (anchorMonth + k * 3) % 12;\n        const targetYear = anchorYear + Math.floor((anchorMonth + k * 3) / 12);\n        const clampedDay = clampDay(targetYear, targetMonth, bill.dueDay);\n        nextDue = createUTCDate(targetYear, targetMonth, clampedDay);\n        \n        if (nextDue >= compareFrom) break;\n        k++;\n      } while (k < 100); // Safety limit\n      break;\n    }\n\n    case 'half_yearly': {\n      // Find next half-year cycle from anchor month\n      let k = 0;\n      do {\n        const targetMonth = (anchorMonth + k * 6) % 12;\n        const targetYear = anchorYear + Math.floor((anchorMonth + k * 6) / 12);\n        const clampedDay = clampDay(targetYear, targetMonth, bill.dueDay);\n        nextDue = createUTCDate(targetYear, targetMonth, clampedDay);\n        \n        if (nextDue >= compareFrom) break;\n        k++;\n      } while (k < 50); // Safety limit\n      break;\n    }\n\n    case 'yearly': {\n      // Find next year cycle from anchor date\n      let targetYear = anchorYear;\n      do {\n        const clampedDay = clampDay(targetYear, anchorMonth, bill.dueDay);\n        nextDue = createUTCDate(targetYear, anchorMonth, clampedDay);\n        \n        if (nextDue >= compareFrom) break;\n        targetYear++;\n      } while (targetYear < anchorYear + 50); // Safety limit\n      break;\n    }\n\n    default:\n      return null;\n  }\n\n  return nextDue;\n};\n\n// Convert Date to UTC date string (YYYY-MM-DD)\nexport const formatDateForStorage = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};","size_bytes":3774},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertInvestmentSchema, insertTransactionSchema, insertBillSchema, insertBillPaymentSchema, insertInvestmentTypeSchema, insertBillCategorySchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Get all investments\n  app.get(\"/api/investments\", async (req, res) => {\n    try {\n      // For demo purposes, using a default user ID\n      const userId = \"demo-user\";\n      const investments = await storage.getInvestments(userId);\n      res.json(investments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch investments\" });\n    }\n  });\n\n  // Get single investment\n  app.get(\"/api/investments/:id\", async (req, res) => {\n    try {\n      const investment = await storage.getInvestment(req.params.id);\n      if (!investment) {\n        return res.status(404).json({ error: \"Investment not found\" });\n      }\n      res.json(investment);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch investment\" });\n    }\n  });\n\n  // Create new investment\n  app.post(\"/api/investments\", async (req, res) => {\n    try {\n      const validatedData = insertInvestmentSchema.parse(req.body);\n      const userId = \"demo-user\"; // For demo purposes\n      const investment = await storage.createInvestment(userId, validatedData);\n      res.status(201).json(investment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create investment\" });\n    }\n  });\n\n  // Update investment\n  app.put(\"/api/investments/:id\", async (req, res) => {\n    try {\n      const validatedData = insertInvestmentSchema.partial().parse(req.body);\n      const investment = await storage.updateInvestment(req.params.id, validatedData);\n      if (!investment) {\n        return res.status(404).json({ error: \"Investment not found\" });\n      }\n      res.json(investment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update investment\" });\n    }\n  });\n\n  // Delete investment\n  app.delete(\"/api/investments/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteInvestment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Investment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete investment\" });\n    }\n  });\n\n  // Get transactions for an investment\n  app.get(\"/api/investments/:id/transactions\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactions(req.params.id);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Create transaction\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const validatedData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(validatedData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create transaction\" });\n    }\n  });\n\n  // Get dashboard summary\n  app.get(\"/api/dashboard/summary\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const investments = await storage.getInvestments(userId);\n      \n      // Calculate total invested (sum of all principal amounts)\n      const totalInvested = investments.reduce((sum, inv) => {\n        return sum + parseFloat(inv.principalAmount);\n      }, 0);\n\n      // Calculate estimated current value (more accurate calculation)\n      const currentValue = investments.reduce((sum, inv) => {\n        const principal = parseFloat(inv.principalAmount);\n        const returnRate = inv.expectedReturn ? parseFloat(inv.expectedReturn) / 100 : 0.08;\n        const startDate = new Date(inv.startDate);\n        const currentDate = new Date();\n        const months = Math.max(0, Math.floor((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 30)));\n        \n        // Skip future-dated investments\n        if (startDate > currentDate) return sum;\n        \n        // Simple compound interest calculation\n        const estimated = principal * Math.pow(1 + returnRate/12, months);\n        return sum + estimated;\n      }, 0);\n\n      // Calculate month-over-month change using transaction history when available\n      const now = new Date();\n      const endOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);\n      \n      // Get all transactions for the user\n      const allTransactions = await storage.getAllTransactionsForUser(userId);\n      \n      let finalCurrentTotal: number;\n      let finalLastMonthTotal: number;\n      \n      // Use transaction data if any transactions exist, otherwise fallback to investment principals\n      if (allTransactions.length > 0) {\n        // Calculate total invested from transaction history (assumes deposits are positive amounts)\n        finalCurrentTotal = allTransactions\n          .filter(tx => new Date(tx.transactionDate) <= now)\n          .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);\n        \n        finalLastMonthTotal = allTransactions\n          .filter(tx => new Date(tx.transactionDate) <= endOfLastMonth)\n          .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);\n      } else {\n        // Fallback to investment principal amounts with proper time boundaries\n        finalCurrentTotal = totalInvested;\n        finalLastMonthTotal = investments\n          .filter(inv => new Date(inv.startDate) <= endOfLastMonth)\n          .reduce((sum, inv) => sum + parseFloat(inv.principalAmount), 0);\n      }\n      \n      // Calculate month-over-month percentage change (as of now vs end of last month)\n      const changeVsLastMonth = finalLastMonthTotal > 0 ? \n        ((finalCurrentTotal - finalLastMonthTotal) / finalLastMonthTotal * 100) : \n        null; // Return null when no baseline exists for proper UI handling\n\n      // Helper function to calculate next due date based on frequency and start cycle\n      const getNextDueDate = (investment: any, fromDate: Date) => {\n        if (!investment.dueDay || !investment.startDate) return null;\n        \n        const startDate = new Date(investment.startDate);\n        const startYear = startDate.getFullYear();\n        const startMonth = startDate.getMonth();\n        \n        // Normalize dates to day precision (remove time component)\n        const startOfDay = (date: Date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const anchor = new Date(Math.max(startOfDay(startDate).getTime(), startOfDay(fromDate).getTime()));\n        \n        // Helper to clamp day to valid range for given month/year\n        const clampDay = (year: number, month: number, day: number) => {\n          const daysInMonth = new Date(year, month + 1, 0).getDate();\n          return Math.min(day, daysInMonth);\n        };\n        \n        // Calculate next occurrence based on frequency\n        let nextDue: Date | null = null;\n        \n        switch (investment.paymentFrequency) {\n          case 'monthly': {\n            // Find next month where due date >= anchor\n            let targetYear = anchor.getFullYear();\n            let targetMonth = anchor.getMonth();\n            \n            do {\n              const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n              nextDue = new Date(targetYear, targetMonth, clampedDay);\n              \n              if (nextDue >= anchor) break;\n              \n              targetMonth++;\n              if (targetMonth > 11) {\n                targetMonth = 0;\n                targetYear++;\n              }\n            } while (true);\n            break;\n          }\n          \n          case 'quarterly': {\n            // Find next quarter cycle from start month\n            let k = 0;\n            do {\n              const targetMonth = (startMonth + k * 3) % 12;\n              const targetYear = startYear + Math.floor((startMonth + k * 3) / 12);\n              const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n              nextDue = new Date(targetYear, targetMonth, clampedDay);\n              \n              if (nextDue >= anchor) break;\n              k++;\n            } while (k < 100); // Safety limit\n            break;\n          }\n          \n          case 'half_yearly': {\n            // Find next half-year cycle from start month\n            let k = 0;\n            do {\n              const targetMonth = (startMonth + k * 6) % 12;\n              const targetYear = startYear + Math.floor((startMonth + k * 6) / 12);\n              const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n              nextDue = new Date(targetYear, targetMonth, clampedDay);\n              \n              if (nextDue >= anchor) break;\n              k++;\n            } while (k < 50); // Safety limit\n            break;\n          }\n          \n          case 'yearly': {\n            // Find next year cycle from start date\n            let targetYear = startYear;\n            do {\n              const clampedDay = clampDay(targetYear, startMonth, investment.dueDay);\n              nextDue = new Date(targetYear, startMonth, clampedDay);\n              \n              if (nextDue >= anchor) break;\n              targetYear++;\n            } while (targetYear < startYear + 50); // Safety limit\n            break;\n          }\n          \n          default:\n            return null;\n        }\n        \n        return nextDue;\n      };\n\n      // Calculate upcoming payments with amounts\n      const today = new Date();\n      const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n      \n      const upcomingPayments = investments.filter(inv => {\n        if (inv.paymentFrequency === 'one_time' || !inv.dueDay || !inv.isActive) return false;\n        \n        const nextDue = getNextDueDate(inv, today);\n        return nextDue && nextDue <= nextWeek;\n      }).map(inv => ({\n        ...inv,\n        nextDueDate: getNextDueDate(inv, today)\n      }));\n\n      // Find next payment details\n      const nextPayment = upcomingPayments.length > 0 ? \n        upcomingPayments.sort((a, b) => {\n          return (a.nextDueDate?.getTime() || 0) - (b.nextDueDate?.getTime() || 0);\n        })[0] : null;\n\n      const nextPaymentDate = nextPayment?.nextDueDate;\n\n      res.json({\n        totalInvested: Math.round(totalInvested),\n        currentValue: Math.round(currentValue),\n        totalGains: Math.round(currentValue - totalInvested),\n        gainsPercentage: totalInvested > 0 ? ((currentValue - totalInvested) / totalInvested * 100) : 0,\n        changeVsLastMonth: changeVsLastMonth !== null ? Math.round(changeVsLastMonth * 100) / 100 : null,\n        upcomingPayments: upcomingPayments.length,\n        nextPaymentAmount: nextPayment ? parseFloat(nextPayment.principalAmount) : null,\n        nextPaymentDate: nextPaymentDate ? nextPaymentDate.getDate() : null,\n        nextPaymentName: nextPayment ? nextPayment.name : null\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard summary\" });\n    }\n  });\n\n  // Bills routes\n  \n  // Get all bills\n  app.get(\"/api/bills\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const bills = await storage.getBills(userId);\n      res.json(bills);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bills\" });\n    }\n  });\n\n  // Get bills summary/insights (MUST be before parameterized routes)\n  app.get(\"/api/bills/summary\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const year = req.query.year ? parseInt(req.query.year as string) : new Date().getFullYear();\n      const bills = await storage.getBills(userId);\n      \n      const totalMonthlyBills = bills\n        .filter(bill => bill.isActive && bill.frequency === 'monthly')\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      const totalQuarterlyBills = bills\n        .filter(bill => bill.isActive && bill.frequency === 'quarterly')\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      const totalYearlyBills = bills\n        .filter(bill => bill.isActive && bill.frequency === 'yearly')\n        .reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n\n      // Calculate monthly equivalent\n      const monthlyEquivalent = totalMonthlyBills + (totalQuarterlyBills / 3) + (totalYearlyBills / 12);\n\n      // Get bills due this week\n      const today = new Date();\n      const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n      \n      const billsDueThisWeek = bills.filter(bill => {\n        if (!bill.isActive || !bill.dueDay || bill.frequency === 'one_time') return false;\n        \n        // Helper to get next valid due date\n        const getNextDueDate = (dueDay: number, fromDate: Date) => {\n          const currentYear = fromDate.getFullYear();\n          const currentMonth = fromDate.getMonth();\n          \n          // Try current month first\n          const daysInCurrentMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n          const validDueDay = Math.min(dueDay, daysInCurrentMonth);\n          const currentMonthDue = new Date(currentYear, currentMonth, validDueDay);\n          \n          if (currentMonthDue >= fromDate) {\n            return currentMonthDue;\n          }\n          \n          // Try next month\n          const nextMonth = currentMonth + 1;\n          const nextYear = nextMonth > 11 ? currentYear + 1 : currentYear;\n          const adjustedNextMonth = nextMonth > 11 ? 0 : nextMonth;\n          \n          const daysInNextMonth = new Date(nextYear, adjustedNextMonth + 1, 0).getDate();\n          const validNextDueDay = Math.min(dueDay, daysInNextMonth);\n          \n          return new Date(nextYear, adjustedNextMonth, validNextDueDay);\n        };\n        \n        const nextDueDate = getNextDueDate(bill.dueDay, today);\n        return nextDueDate <= nextWeek;\n      });\n\n      // Generate monthly breakdown for the year with actual payments\n      const monthlyTotals = await Promise.all(\n        Array.from({ length: 12 }, async (_, monthIndex) => {\n          let projected = 0;\n          let actual = 0;\n          \n          // Calculate projected amounts with proper cycle anchoring\n          bills.filter(bill => bill.isActive).forEach(bill => {\n            const amount = parseFloat(bill.amount);\n            \n            if (bill.frequency === 'monthly') {\n              projected += amount;\n            } else if (bill.frequency === 'quarterly') {\n              // Use nextDueDate or creation date as anchor, bill occurs every 3 months\n              const anchorDate = bill.nextDueDate ? new Date(bill.nextDueDate) : new Date(bill.createdAt);\n              const anchorMonth = anchorDate.getMonth();\n              \n              // Check if this month falls on a quarterly cycle from anchor\n              const monthsFromAnchor = (monthIndex - anchorMonth + 12) % 12;\n              if (monthsFromAnchor % 3 === 0) {\n                projected += amount;\n              }\n            } else if (bill.frequency === 'yearly') {\n              // Use nextDueDate or creation date as anchor, bill occurs once per year\n              const anchorDate = bill.nextDueDate ? new Date(bill.nextDueDate) : new Date(bill.createdAt);\n              const anchorMonth = anchorDate.getMonth();\n              \n              if (monthIndex === anchorMonth) {\n                projected += amount;\n              }\n            } else if (bill.frequency === 'half_yearly') {\n              // Use nextDueDate or creation date as anchor, bill occurs every 6 months\n              const anchorDate = bill.nextDueDate ? new Date(bill.nextDueDate) : new Date(bill.createdAt);\n              const anchorMonth = anchorDate.getMonth();\n              \n              // Check if this month falls on a half-yearly cycle from anchor\n              const monthsFromAnchor = (monthIndex - anchorMonth + 12) % 12;\n              if (monthsFromAnchor % 6 === 0) {\n                projected += amount;\n              }\n            }\n          });\n          \n          // Calculate actual payments for this month (only count paid status)\n          for (const bill of bills) {\n            const payments = await storage.getBillPayments(bill.id);\n            const monthPayments = payments.filter(payment => {\n              const paymentDate = new Date(payment.paidDate);\n              return payment.status === 'paid' && \n                     paymentDate.getFullYear() === year && \n                     paymentDate.getMonth() === monthIndex;\n            });\n            actual += monthPayments.reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n          }\n          \n          return {\n            month: monthIndex + 1,\n            monthName: new Date(year, monthIndex).toLocaleString('default', { month: 'long' }),\n            projected: Math.round(projected),\n            actual: Math.round(actual)\n          };\n        })\n      );\n\n      // Category breakdown\n      const categoryBreakdown = bills\n        .filter(bill => bill.isActive)\n        .reduce((acc, bill) => {\n          const category = bill.category;\n          const monthlyAmount = bill.frequency === 'monthly' ? parseFloat(bill.amount) :\n                              bill.frequency === 'quarterly' ? parseFloat(bill.amount) / 3 :\n                              bill.frequency === 'yearly' ? parseFloat(bill.amount) / 12 :\n                              parseFloat(bill.amount);\n          \n          if (!acc[category]) {\n            acc[category] = { total: 0, count: 0 };\n          }\n          acc[category].total += monthlyAmount;\n          acc[category].count += 1;\n          return acc;\n        }, {} as Record<string, { total: number; count: number }>);\n\n      res.json({\n        totalMonthlyBills: Math.round(totalMonthlyBills),\n        totalQuarterlyBills: Math.round(totalQuarterlyBills),\n        totalYearlyBills: Math.round(totalYearlyBills),\n        monthlyEquivalent: Math.round(monthlyEquivalent),\n        billsDueThisWeek: billsDueThisWeek.length,\n        activeBillsCount: bills.filter(bill => bill.isActive).length,\n        categoryBreakdown,\n        monthlyTotals,\n        year\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bills summary\" });\n    }\n  });\n\n  // Get single bill\n  app.get(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const bill = await storage.getBill(req.params.id);\n      if (!bill) {\n        return res.status(404).json({ error: \"Bill not found\" });\n      }\n      res.json(bill);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bill\" });\n    }\n  });\n\n  // Get bill payments for a specific bill\n  app.get(\"/api/bills/:id/payments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const payments = await storage.getBillPayments(id);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bill payments\" });\n    }\n  });\n\n  // Create a bill payment\n  app.post(\"/api/bills/:id/payments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const paymentData = insertBillPaymentSchema.parse({\n        ...req.body,\n        billId: id, // Override any billId from body with URL param\n      });\n      const payment = await storage.createBillPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid payment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create payment\" });\n    }\n  });\n\n  // Get all bill payments for a year (for summary calculations)\n  app.get(\"/api/bills/payments\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const year = req.query.year ? parseInt(req.query.year as string) : new Date().getFullYear();\n      \n      const bills = await storage.getBills(userId);\n      const allPayments: any[] = [];\n      \n      for (const bill of bills) {\n        const payments = await storage.getBillPayments(bill.id);\n        const yearPayments = payments.filter(payment => {\n          const paymentYear = new Date(payment.paidDate).getFullYear();\n          return paymentYear === year;\n        });\n        \n        yearPayments.forEach(payment => {\n          allPayments.push({\n            ...payment,\n            billName: bill.name,\n            category: bill.category\n          });\n        });\n      }\n      \n      res.json(allPayments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payments\" });\n    }\n  });\n\n  // Create new bill\n  app.post(\"/api/bills\", async (req, res) => {\n    try {\n      const validatedData = insertBillSchema.parse(req.body);\n      const userId = \"demo-user\";\n      const bill = await storage.createBill(userId, validatedData);\n      res.status(201).json(bill);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create bill\" });\n    }\n  });\n\n  // Update bill\n  app.put(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const validatedData = insertBillSchema.partial().parse(req.body);\n      const bill = await storage.updateBill(req.params.id, validatedData);\n      if (!bill) {\n        return res.status(404).json({ error: \"Bill not found\" });\n      }\n      res.json(bill);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update bill\" });\n    }\n  });\n\n  // Delete bill\n  app.delete(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBill(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Bill not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete bill\" });\n    }\n  });\n\n  // Custom Investment Types routes\n  \n  // Get all investment types\n  app.get(\"/api/investment-types\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const types = await storage.getInvestmentTypes(userId);\n      res.json(types);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch investment types\" });\n    }\n  });\n\n  // Create investment type\n  app.post(\"/api/investment-types\", async (req, res) => {\n    try {\n      const validatedData = insertInvestmentTypeSchema.parse(req.body);\n      const userId = \"demo-user\";\n      const type = await storage.createInvestmentType(userId, validatedData);\n      res.status(201).json(type);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create investment type\" });\n    }\n  });\n\n  // Update investment type\n  app.put(\"/api/investment-types/:id\", async (req, res) => {\n    try {\n      const validatedData = insertInvestmentTypeSchema.partial().parse(req.body);\n      const type = await storage.updateInvestmentType(req.params.id, validatedData);\n      if (!type) {\n        return res.status(404).json({ error: \"Investment type not found\" });\n      }\n      res.json(type);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update investment type\" });\n    }\n  });\n\n  // Delete investment type\n  app.delete(\"/api/investment-types/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteInvestmentType(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Investment type not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete investment type\" });\n    }\n  });\n\n  // Custom Bill Categories routes\n  \n  // Get all bill categories\n  app.get(\"/api/bill-categories\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const categories = await storage.getBillCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bill categories\" });\n    }\n  });\n\n  // Create bill category\n  app.post(\"/api/bill-categories\", async (req, res) => {\n    try {\n      const validatedData = insertBillCategorySchema.parse(req.body);\n      const userId = \"demo-user\";\n      const category = await storage.createBillCategory(userId, validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create bill category\" });\n    }\n  });\n\n  // Update bill category\n  app.put(\"/api/bill-categories/:id\", async (req, res) => {\n    try {\n      const validatedData = insertBillCategorySchema.partial().parse(req.body);\n      const category = await storage.updateBillCategory(req.params.id, validatedData);\n      if (!category) {\n        return res.status(404).json({ error: \"Bill category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update bill category\" });\n    }\n  });\n\n  // Delete bill category\n  app.delete(\"/api/bill-categories/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBillCategory(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Bill category not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete bill category\" });\n    }\n  });\n\n  // Data Export/Import routes\n  \n  // Export all data\n  app.get(\"/api/data/export\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const exportData = await storage.exportAllData(userId);\n      \n      // Set headers for file download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"financial-data-export-${new Date().toISOString().split('T')[0]}.json\"`);\n      \n      res.json(exportData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to export data\" });\n    }\n  });\n\n  // Import all data\n  app.post(\"/api/data/import\", async (req, res) => {\n    try {\n      const userId = \"demo-user\";\n      const success = await storage.importAllData(userId, req.body);\n      \n      if (!success) {\n        return res.status(400).json({ error: \"Failed to import data\" });\n      }\n      \n      res.json({ message: \"Data imported successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to import data\" });\n    }\n  });\n\n\n  // Update bill payment\n  app.put(\"/api/bill-payments/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertBillPaymentSchema.partial().parse(req.body);\n      const payment = await storage.updateBillPayment(id, validatedData);\n      if (!payment) {\n        return res.status(404).json({ error: \"Payment not found\" });\n      }\n      res.json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid payment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update payment\" });\n    }\n  });\n\n  // Delete bill payment\n  app.delete(\"/api/bill-payments/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteBillPayment(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Payment not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete payment\" });\n    }\n  });\n\n  // Create bill payment\n  app.post(\"/api/bill-payments\", async (req, res) => {\n    try {\n      const validatedData = insertBillPaymentSchema.parse(req.body);\n      const payment = await storage.createBillPayment(validatedData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create bill payment\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29281},"server/storage.ts":{"content":"import { type User, type InsertUser, type Investment, type InsertInvestment, type Transaction, type InsertTransaction, type Bill, type InsertBill, type BillPayment, type InsertBillPayment, type InvestmentType, type InsertInvestmentType, type BillCategory, type InsertBillCategory } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { calculateNextBillDueDate, formatDateForStorage } from \"./date-utils\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Investment methods\n  getInvestments(userId: string): Promise<Investment[]>;\n  getInvestment(id: string): Promise<Investment | undefined>;\n  createInvestment(userId: string, investment: InsertInvestment): Promise<Investment>;\n  updateInvestment(id: string, investment: Partial<InsertInvestment>): Promise<Investment | undefined>;\n  deleteInvestment(id: string): Promise<boolean>;\n\n  // Transaction methods\n  getTransactions(investmentId: string): Promise<Transaction[]>;\n  getAllTransactionsForUser(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  deleteTransaction(id: string): Promise<boolean>;\n\n  // Bill methods\n  getBills(userId: string): Promise<Bill[]>;\n  getBill(id: string): Promise<Bill | undefined>;\n  createBill(userId: string, bill: InsertBill): Promise<Bill>;\n  updateBill(id: string, bill: Partial<InsertBill>): Promise<Bill | undefined>;\n  deleteBill(id: string): Promise<boolean>;\n\n  // Bill payment methods\n  getBillPayments(billId: string): Promise<BillPayment[]>;\n  createBillPayment(payment: InsertBillPayment): Promise<BillPayment>;\n  updateBillPayment(id: string, payment: Partial<InsertBillPayment>): Promise<BillPayment | undefined>;\n  deleteBillPayment(id: string): Promise<boolean>;\n\n  // Custom Investment Types methods\n  getInvestmentTypes(userId: string): Promise<InvestmentType[]>;\n  createInvestmentType(userId: string, type: InsertInvestmentType): Promise<InvestmentType>;\n  updateInvestmentType(id: string, type: Partial<InsertInvestmentType>): Promise<InvestmentType | undefined>;\n  deleteInvestmentType(id: string): Promise<boolean>;\n\n  // Custom Bill Categories methods\n  getBillCategories(userId: string): Promise<BillCategory[]>;\n  createBillCategory(userId: string, category: InsertBillCategory): Promise<BillCategory>;\n  updateBillCategory(id: string, category: Partial<InsertBillCategory>): Promise<BillCategory | undefined>;\n  deleteBillCategory(id: string): Promise<boolean>;\n\n  // Data export/import methods\n  exportAllData(userId: string): Promise<any>;\n  importAllData(userId: string, data: any): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private investments: Map<string, Investment>;\n  private transactions: Map<string, Transaction>;\n  private bills: Map<string, Bill>;\n  private billPayments: Map<string, BillPayment>;\n  private investmentTypes: Map<string, InvestmentType>;\n  private billCategories: Map<string, BillCategory>;\n\n  constructor() {\n    this.users = new Map();\n    this.investments = new Map();\n    this.transactions = new Map();\n    this.bills = new Map();\n    this.billPayments = new Map();\n    this.investmentTypes = new Map();\n    this.billCategories = new Map();\n    this.initializeDefaultTypes();\n  }\n\n  // Initialize default investment types and bill categories\n  private async initializeDefaultTypes(): Promise<void> {\n    const defaultInvestmentTypes = [\n      { name: \"Mutual Fund\", isDefault: true },\n      { name: \"Fixed Deposit\", isDefault: true },\n      { name: \"Recurring Deposit\", isDefault: true },\n      { name: \"LIC/Insurance\", isDefault: true },\n      { name: \"PPF\", isDefault: true },\n      { name: \"Stocks\", isDefault: true },\n      { name: \"Other\", isDefault: true }\n    ];\n\n    const defaultBillCategories = [\n      { name: \"Utilities\", isDefault: true },\n      { name: \"Subscriptions\", isDefault: true },\n      { name: \"Insurance\", isDefault: true },\n      { name: \"Loans\", isDefault: true },\n      { name: \"Groceries\", isDefault: true },\n      { name: \"Transport\", isDefault: true },\n      { name: \"Healthcare\", isDefault: true },\n      { name: \"Entertainment\", isDefault: true },\n      { name: \"Other\", isDefault: true }\n    ];\n\n    const defaultUserId = \"demo-user\";\n\n    for (const type of defaultInvestmentTypes) {\n      await this.createInvestmentType(defaultUserId, type);\n    }\n\n    for (const category of defaultBillCategories) {\n      await this.createBillCategory(defaultUserId, category);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getInvestments(userId: string): Promise<Investment[]> {\n    return Array.from(this.investments.values()).filter(\n      (investment) => investment.userId === userId\n    );\n  }\n\n  async getInvestment(id: string): Promise<Investment | undefined> {\n    return this.investments.get(id);\n  }\n\n  async createInvestment(userId: string, insertInvestment: InsertInvestment): Promise<Investment> {\n    const id = randomUUID();\n    const now = new Date();\n    const investment: Investment = { \n      ...insertInvestment,\n      dueDay: insertInvestment.dueDay ?? null,\n      maturityDate: insertInvestment.maturityDate ?? null,\n      expectedReturn: insertInvestment.expectedReturn ?? null,\n      notes: insertInvestment.notes ?? null,\n      id, \n      userId,\n      isActive: true,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.investments.set(id, investment);\n    return investment;\n  }\n\n  async updateInvestment(id: string, updateData: Partial<InsertInvestment>): Promise<Investment | undefined> {\n    const investment = this.investments.get(id);\n    if (!investment) return undefined;\n\n    const updatedInvestment: Investment = {\n      ...investment,\n      ...updateData,\n      updatedAt: new Date()\n    };\n    this.investments.set(id, updatedInvestment);\n    return updatedInvestment;\n  }\n\n  async deleteInvestment(id: string): Promise<boolean> {\n    return this.investments.delete(id);\n  }\n\n  async getTransactions(investmentId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(\n      (transaction) => transaction.investmentId === investmentId\n    );\n  }\n\n  async getAllTransactionsForUser(userId: string): Promise<Transaction[]> {\n    const userInvestments = await this.getInvestments(userId);\n    const investmentIds = new Set(userInvestments.map(inv => inv.id));\n    \n    return Array.from(this.transactions.values()).filter(\n      (transaction) => investmentIds.has(transaction.investmentId)\n    );\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = {\n      ...insertTransaction,\n      notes: insertTransaction.notes ?? null,\n      id,\n      createdAt: new Date()\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async deleteTransaction(id: string): Promise<boolean> {\n    return this.transactions.delete(id);\n  }\n\n  async getBills(userId: string): Promise<Bill[]> {\n    return Array.from(this.bills.values()).filter(\n      (bill) => bill.userId === userId\n    );\n  }\n\n  async getBill(id: string): Promise<Bill | undefined> {\n    return this.bills.get(id);\n  }\n\n  async createBill(userId: string, insertBill: InsertBill): Promise<Bill> {\n    const id = randomUUID();\n    const now = new Date();\n    const bill: Bill = { \n      ...insertBill,\n      dueDay: insertBill.dueDay ?? null,\n      nextDueDate: insertBill.nextDueDate ?? null,\n      lastPaidDate: null, // Initialize as null\n      description: insertBill.description ?? null,\n      vendor: insertBill.vendor ?? null,\n      reminderDays: insertBill.reminderDays ?? 3,\n      id, \n      userId,\n      isActive: true,\n      isRecurring: insertBill.isRecurring ?? true,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.bills.set(id, bill);\n    return bill;\n  }\n\n  async updateBill(id: string, updateData: Partial<InsertBill>): Promise<Bill | undefined> {\n    const bill = this.bills.get(id);\n    if (!bill) return undefined;\n\n    const updatedBill: Bill = {\n      ...bill,\n      ...updateData,\n      updatedAt: new Date()\n    };\n    this.bills.set(id, updatedBill);\n    return updatedBill;\n  }\n\n  async deleteBill(id: string): Promise<boolean> {\n    return this.bills.delete(id);\n  }\n\n  async getBillPayments(billId: string): Promise<BillPayment[]> {\n    return Array.from(this.billPayments.values()).filter(\n      (payment) => payment.billId === billId\n    );\n  }\n\n  async createBillPayment(insertPayment: InsertBillPayment): Promise<BillPayment> {\n    const id = randomUUID();\n    const effectiveStatus = insertPayment.status ?? \"paid\";\n    const payment: BillPayment = {\n      ...insertPayment,\n      amount: insertPayment.amount.toString(), // Convert to string for database storage\n      notes: insertPayment.notes ?? null,\n      status: effectiveStatus,\n      id,\n      createdAt: new Date()\n    };\n    this.billPayments.set(id, payment);\n\n    // Update bill state after successful payment recording\n    if (effectiveStatus === \"paid\") {\n      await this.updateBillAfterPayment(insertPayment.billId, insertPayment.paidDate, insertPayment.dueDate);\n    }\n\n    return payment;\n  }\n\n  // deleteBillPayment is now implemented above with proper state management\n\n  // Helper method to update bill state after payment\n  private async updateBillAfterPayment(billId: string, paidDate: string, dueDate: string): Promise<void> {\n    const bill = await this.getBill(billId);\n    if (!bill || !bill.isActive || bill.frequency === \"one_time\") {\n      return;\n    }\n\n    // Calculate next due date based on the due date that was paid, not when it was paid\n    const dayAfterDue = new Date(dueDate);\n    dayAfterDue.setDate(dayAfterDue.getDate() + 1); // Start from day after due date\n    \n    const nextDueDate = calculateNextBillDueDate(bill, dayAfterDue);\n    const updates: Partial<InsertBill> = {};\n    \n    if (nextDueDate) {\n      updates.nextDueDate = formatDateForStorage(nextDueDate);\n    }\n    \n    // Update lastPaidDate\n    updates.lastPaidDate = paidDate;\n    \n    if (Object.keys(updates).length > 0) {\n      await this.updateBill(billId, updates);\n    }\n  }\n\n  async updateBillPayment(id: string, updateData: Partial<InsertBillPayment>): Promise<BillPayment | undefined> {\n    const payment = this.billPayments.get(id);\n    if (!payment) return undefined;\n\n    const oldStatus = payment.status;\n    const updatedPayment: BillPayment = {\n      ...payment,\n      ...updateData,\n      // Ensure amount is converted to string if provided\n      amount: updateData.amount !== undefined ? updateData.amount.toString() : payment.amount,\n    };\n    this.billPayments.set(id, updatedPayment);\n\n    // Handle status changes for bill state management\n    if (oldStatus === \"paid\" && updateData.status && updateData.status !== \"paid\") {\n      // Payment was paid but now changed to something else - recompute bill state\n      await this.recomputeBillStateAfterPaymentDeletion(payment.billId);\n    } else if (oldStatus !== \"paid\" && updateData.status === \"paid\") {\n      // Payment status changed to paid - update bill state\n      await this.updateBillAfterPayment(payment.billId, payment.paidDate, payment.dueDate);\n    }\n\n    return updatedPayment;\n  }\n\n  async deleteBillPayment(id: string): Promise<boolean> {\n    const payment = this.billPayments.get(id);\n    const deleted = this.billPayments.delete(id);\n    \n    // Recompute bill state after payment deletion\n    if (deleted && payment && payment.status === \"paid\") {\n      await this.recomputeBillStateAfterPaymentDeletion(payment.billId);\n    }\n    \n    return deleted;\n  }\n\n  // Recompute bill state after payment deletion by looking at remaining payments\n  private async recomputeBillStateAfterPaymentDeletion(billId: string): Promise<void> {\n    const bill = await this.getBill(billId);\n    if (!bill || !bill.isActive || bill.frequency === \"one_time\") {\n      return;\n    }\n\n    const remainingPayments = await this.getBillPayments(billId);\n    const paidPayments = remainingPayments.filter(p => p.status === \"paid\");\n    \n    if (paidPayments.length > 0) {\n      // Find the latest payment by due date and recalculate from there\n      const latestPayment = paidPayments.sort((a, b) => \n        new Date(b.dueDate).getTime() - new Date(a.dueDate).getTime()\n      )[0];\n      \n      // Calculate next due date from the latest payment's due date\n      const dayAfterLatestDue = new Date(latestPayment.dueDate);\n      dayAfterLatestDue.setDate(dayAfterLatestDue.getDate() + 1);\n      \n      const nextDueDate = calculateNextBillDueDate(bill, dayAfterLatestDue);\n      if (nextDueDate) {\n        await this.updateBill(billId, {\n          nextDueDate: formatDateForStorage(nextDueDate),\n          lastPaidDate: latestPayment.paidDate\n        });\n      }\n    } else {\n      // No payments left, reset to original schedule from today\n      const nextDueDate = calculateNextBillDueDate(bill, new Date());\n      if (nextDueDate) {\n        await this.updateBill(billId, {\n          nextDueDate: formatDateForStorage(nextDueDate),\n          lastPaidDate: null // Clear last paid date\n        });\n      }\n    }\n  }\n\n  // Investment Types methods\n  async getInvestmentTypes(userId: string): Promise<InvestmentType[]> {\n    return Array.from(this.investmentTypes.values()).filter(\n      (type) => type.userId === userId\n    );\n  }\n\n  async createInvestmentType(userId: string, insertType: InsertInvestmentType): Promise<InvestmentType> {\n    const id = randomUUID();\n    const type: InvestmentType = {\n      ...insertType,\n      id,\n      userId,\n      isDefault: insertType.isDefault ?? false,\n      createdAt: new Date()\n    };\n    this.investmentTypes.set(id, type);\n    return type;\n  }\n\n  async updateInvestmentType(id: string, updateData: Partial<InsertInvestmentType>): Promise<InvestmentType | undefined> {\n    const type = this.investmentTypes.get(id);\n    if (!type) return undefined;\n\n    const updatedType: InvestmentType = {\n      ...type,\n      ...updateData\n    };\n    this.investmentTypes.set(id, updatedType);\n    return updatedType;\n  }\n\n  async deleteInvestmentType(id: string): Promise<boolean> {\n    return this.investmentTypes.delete(id);\n  }\n\n  // Bill Categories methods\n  async getBillCategories(userId: string): Promise<BillCategory[]> {\n    return Array.from(this.billCategories.values()).filter(\n      (category) => category.userId === userId\n    );\n  }\n\n  async createBillCategory(userId: string, insertCategory: InsertBillCategory): Promise<BillCategory> {\n    const id = randomUUID();\n    const category: BillCategory = {\n      ...insertCategory,\n      id,\n      userId,\n      isDefault: insertCategory.isDefault ?? false,\n      createdAt: new Date()\n    };\n    this.billCategories.set(id, category);\n    return category;\n  }\n\n  async updateBillCategory(id: string, updateData: Partial<InsertBillCategory>): Promise<BillCategory | undefined> {\n    const category = this.billCategories.get(id);\n    if (!category) return undefined;\n\n    const updatedCategory: BillCategory = {\n      ...category,\n      ...updateData\n    };\n    this.billCategories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteBillCategory(id: string): Promise<boolean> {\n    return this.billCategories.delete(id);\n  }\n\n  // Data export/import methods\n  async exportAllData(userId: string): Promise<any> {\n    const [investments, bills, billPayments, investmentTypes, billCategories, transactions] = await Promise.all([\n      this.getInvestments(userId),\n      this.getBills(userId),\n      Promise.all((await this.getBills(userId)).map(bill => this.getBillPayments(bill.id))).then(results => results.flat()),\n      this.getInvestmentTypes(userId),\n      this.getBillCategories(userId),\n      this.getAllTransactionsForUser(userId)\n    ]);\n\n    return {\n      version: \"1.0.0\",\n      exportedAt: new Date().toISOString(),\n      data: {\n        investments,\n        bills,\n        billPayments,\n        investmentTypes: investmentTypes.filter(type => !type.isDefault),\n        billCategories: billCategories.filter(category => !category.isDefault),\n        transactions\n      }\n    };\n  }\n\n  async importAllData(userId: string, importData: any): Promise<boolean> {\n    try {\n      const data = importData.data;\n      \n      // Import custom investment types\n      if (data.investmentTypes) {\n        for (const type of data.investmentTypes) {\n          await this.createInvestmentType(userId, {\n            name: type.name,\n            isDefault: false\n          });\n        }\n      }\n\n      // Import custom bill categories  \n      if (data.billCategories) {\n        for (const category of data.billCategories) {\n          await this.createBillCategory(userId, {\n            name: category.name,\n            isDefault: false\n          });\n        }\n      }\n\n      // Import investments\n      if (data.investments) {\n        for (const investment of data.investments) {\n          const { id, userId: _, createdAt, updatedAt, ...insertData } = investment;\n          await this.createInvestment(userId, insertData);\n        }\n      }\n\n      // Import bills\n      if (data.bills) {\n        for (const bill of data.bills) {\n          const { id, userId: _, createdAt, updatedAt, ...insertData } = bill;\n          await this.createBill(userId, insertData);\n        }\n      }\n\n      // Import transactions\n      if (data.transactions) {\n        for (const transaction of data.transactions) {\n          const { id, createdAt, ...insertData } = transaction;\n          await this.createTransaction(insertData);\n        }\n      }\n\n      // Import bill payments\n      if (data.billPayments) {\n        for (const payment of data.billPayments) {\n          const { id, createdAt, ...insertData } = payment;\n          await this.createBillPayment(insertData);\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Import failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":18578},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, date, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const investments = pgTable(\"investments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'mutual_fund', 'fixed_deposit', 'recurring_deposit', 'lic', 'ppf', 'stocks', 'other'\n  principalAmount: decimal(\"principal_amount\", { precision: 15, scale: 2 }).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  paymentFrequency: text(\"payment_frequency\").notNull(), // 'monthly', 'quarterly', 'half_yearly', 'yearly', 'one_time'\n  dueDay: integer(\"due_day\"), // 1-31, null for one-time\n  maturityDate: date(\"maturity_date\"),\n  expectedReturn: decimal(\"expected_return\", { precision: 5, scale: 2 }), // percentage\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  investmentId: varchar(\"investment_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  transactionDate: date(\"transaction_date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const bills = pgTable(\"bills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // 'utilities', 'subscriptions', 'insurance', 'loans', 'groceries', 'transport', 'healthcare', 'entertainment', 'other'\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  frequency: text(\"frequency\").notNull(), // 'monthly', 'quarterly', 'half_yearly', 'yearly', 'one_time'\n  dueDay: integer(\"due_day\"), // 1-31, null for one-time\n  nextDueDate: date(\"next_due_date\"),\n  lastPaidDate: date(\"last_paid_date\"), // track when bill was last paid\n  description: text(\"description\"),\n  vendor: text(\"vendor\"), // company/service provider\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  isRecurring: boolean(\"is_recurring\").default(true).notNull(),\n  reminderDays: integer(\"reminder_days\").default(3), // days before due date to remind\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const billPayments = pgTable(\"bill_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  billId: varchar(\"bill_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  paidDate: date(\"paid_date\").notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  status: text(\"status\").notNull().default(\"paid\"), // 'paid', 'overdue', 'cancelled'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertInvestmentSchema = createInsertSchema(investments).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  paymentFrequency: z.enum(['monthly', 'quarterly', 'half_yearly', 'yearly', 'one_time']),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillSchema = createInsertSchema(bills).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBillPaymentSchema = createInsertSchema(billPayments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  amount: z.coerce.number().positive(\"Amount must be positive\"),\n  paidDate: z.string().min(1, \"Paid date is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n});\n\n// Custom Investment Types table\nexport const investmentTypes = pgTable(\"investment_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  isDefault: boolean(\"is_default\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Custom Bill Categories table\nexport const billCategories = pgTable(\"bill_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  isDefault: boolean(\"is_default\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertInvestmentTypeSchema = createInsertSchema(investmentTypes).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertBillCategorySchema = createInsertSchema(billCategories).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Investment = typeof investments.$inferSelect;\nexport type InsertInvestment = z.infer<typeof insertInvestmentSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Bill = typeof bills.$inferSelect;\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type BillPayment = typeof billPayments.$inferSelect;\nexport type InsertBillPayment = z.infer<typeof insertBillPaymentSchema>;\nexport type InvestmentType = typeof investmentTypes.$inferSelect;\nexport type InsertInvestmentType = z.infer<typeof insertInvestmentTypeSchema>;\nexport type BillCategory = typeof billCategories.$inferSelect;\nexport type InsertBillCategory = z.infer<typeof insertBillCategorySchema>;\n","size_bytes":6129},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Investments from \"@/pages/investments\";\nimport Bills from \"@/pages/bills\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/investments\" component={Investments} />\n      <Route path=\"/bills\" component={Bills} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1090},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(210, 40%, 96%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(217.2, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2, 91.2%, 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4752},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-investment-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertInvestmentSchema, InsertInvestment, Investment, InvestmentType } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { X } from \"lucide-react\";\n\ninterface AddInvestmentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  editingInvestment?: Investment | null;\n}\n\nexport function AddInvestmentModal({ open, onOpenChange, editingInvestment }: AddInvestmentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditMode = !!editingInvestment;\n\n  const { data: investmentTypes, isLoading: investmentTypesLoading } = useQuery<InvestmentType[]>({\n    queryKey: [\"/api/investment-types\"],\n  });\n\n  const form = useForm<InsertInvestment>({\n    resolver: zodResolver(insertInvestmentSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"\",\n      principalAmount: \"0\",\n      startDate: \"\",\n      paymentFrequency: \"monthly\",\n      dueDay: null,\n      maturityDate: null,\n      expectedReturn: null,\n      notes: null,\n    },\n  });\n\n  // Update form values when editing\n  useEffect(() => {\n    if (editingInvestment) {\n      form.reset({\n        name: editingInvestment.name,\n        type: editingInvestment.type,\n        principalAmount: editingInvestment.principalAmount,\n        startDate: editingInvestment.startDate,\n        paymentFrequency: editingInvestment.paymentFrequency as \"monthly\" | \"quarterly\" | \"half_yearly\" | \"yearly\" | \"one_time\",\n        dueDay: editingInvestment.dueDay,\n        maturityDate: editingInvestment.maturityDate,\n        expectedReturn: editingInvestment.expectedReturn,\n        notes: editingInvestment.notes,\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        type: \"\",\n        principalAmount: \"0\",\n        startDate: \"\",\n        paymentFrequency: \"monthly\",\n        dueDay: null,\n        maturityDate: null,\n        expectedReturn: null,\n        notes: null,\n      });\n    }\n  }, [editingInvestment, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertInvestment) => \n      isEditMode \n        ? apiRequest(\"PUT\", `/api/investments/${editingInvestment.id}`, data)\n        : apiRequest(\"POST\", \"/api/investments\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/summary\"] });\n      toast({\n        title: \"Success\",\n        description: isEditMode ? \"Investment updated successfully\" : \"Investment added successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: isEditMode ? \"Failed to update investment\" : \"Failed to add investment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertInvestment) => {\n    createMutation.mutate(data);\n  };\n\n  const paymentFrequency = form.watch(\"paymentFrequency\");\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>{isEditMode ? \"Edit Investment\" : \"Add New Investment\"}</DialogTitle>\n            <button \n              className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-modal\"\n            >\n              <X size={20} />\n            </button>\n          </div>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"type\">Investment Type</Label>\n              <Select \n                onValueChange={(value) => form.setValue(\"type\", value)}\n                value={form.watch(\"type\")}\n              >\n                <SelectTrigger data-testid=\"select-investment-type\">\n                  <SelectValue placeholder=\"Select Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {investmentTypes?.map((type) => (\n                    <SelectItem key={type.id} value={type.id}>\n                      {type.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.type && (\n                <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.type.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"name\">Investment Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"e.g., HDFC Top 100 Fund\"\n                {...form.register(\"name\")}\n                data-testid=\"input-investment-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"principalAmount\">Principal Amount</Label>\n              <Input\n                id=\"principalAmount\"\n                type=\"number\"\n                placeholder=\"10000\"\n                {...form.register(\"principalAmount\")}\n                data-testid=\"input-principal-amount\"\n              />\n              {form.formState.errors.principalAmount && (\n                <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.principalAmount.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                {...form.register(\"startDate\")}\n                data-testid=\"input-start-date\"\n              />\n              {form.formState.errors.startDate && (\n                <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.startDate.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"paymentFrequency\">Payment Frequency</Label>\n              <Select \n                onValueChange={(value) => form.setValue(\"paymentFrequency\", value as \"monthly\" | \"quarterly\" | \"half_yearly\" | \"yearly\" | \"one_time\")}\n                value={form.watch(\"paymentFrequency\")}\n              >\n                <SelectTrigger data-testid=\"select-payment-frequency\">\n                  <SelectValue placeholder=\"Select Frequency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  <SelectItem value=\"half_yearly\">Half-yearly</SelectItem>\n                  <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  <SelectItem value=\"one_time\">One-time</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.paymentFrequency && (\n                <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.paymentFrequency.message}</p>\n              )}\n            </div>\n            \n            {paymentFrequency !== \"one_time\" && (\n              <div>\n                <Label htmlFor=\"dueDay\">Due Day</Label>\n                <Select \n                  onValueChange={(value) => form.setValue(\"dueDay\", parseInt(value))}\n                  value={form.watch(\"dueDay\")?.toString()}\n                >\n                  <SelectTrigger data-testid=\"select-due-day\">\n                    <SelectValue placeholder=\"Select Day\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Array.from({ length: 31 }, (_, i) => i + 1).map((day) => (\n                      <SelectItem key={day} value={day.toString()}>\n                        {day}{day === 1 ? 'st' : day === 2 ? 'nd' : day === 3 ? 'rd' : 'th'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n            \n            <div>\n              <Label htmlFor=\"maturityDate\">Maturity Date (Optional)</Label>\n              <Input\n                id=\"maturityDate\"\n                type=\"date\"\n                {...form.register(\"maturityDate\")}\n                data-testid=\"input-maturity-date\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"expectedReturn\">Expected Return/Interest Rate (%) (Optional)</Label>\n              <Input\n                id=\"expectedReturn\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"12.5\"\n                {...form.register(\"expectedReturn\")}\n                data-testid=\"input-expected-return\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              rows={3}\n              placeholder=\"Any additional information about this investment...\"\n              {...form.register(\"notes\")}\n              data-testid=\"textarea-notes\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-4 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {createMutation.isPending \n                ? (isEditMode ? \"Updating...\" : \"Adding...\") \n                : (isEditMode ? \"Update Investment\" : \"Add Investment\")\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10742},"client/src/components/allocation-chart.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Investment, InvestmentType } from \"@shared/schema\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\n\n// Color palette for dynamic types\nconst CHART_COLORS = ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B', '#EF4444', '#06B6D4', '#6B7280', '#EC4899', '#84CC16'];\n\nexport function AllocationChart() {\n  const [valueType, setValueType] = useState<'invested' | 'current'>('current');\n  \n  const { data: investments, isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n  \n  const { data: investmentTypes } = useQuery<InvestmentType[]>({\n    queryKey: [\"/api/investment-types\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"h-64 bg-muted rounded\"></div>\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"h-6 bg-muted rounded\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Calculate current value for an investment\n  const calculateCurrentValue = (investment: Investment) => {\n    const principal = parseFloat(investment.principalAmount);\n    const annualReturnRate = investment.expectedReturn ? parseFloat(investment.expectedReturn) / 100 : 0.08;\n    \n    // Calculate months elapsed since start date\n    const startDate = new Date(investment.startDate);\n    const currentDate = new Date();\n    const monthsElapsed = Math.max(0, (currentDate.getFullYear() - startDate.getFullYear()) * 12 + (currentDate.getMonth() - startDate.getMonth()));\n    \n    // Simple annual compounding: principal * (1 + rate)^years\n    const yearsElapsed = monthsElapsed / 12;\n    return principal * Math.pow(1 + annualReturnRate, yearsElapsed);\n  };\n\n  // Group investments by type and calculate totals\n  const allocationData = investments?.reduce((acc, investment, index) => {\n    const typeId = investment.type;\n    const typeInfo = investmentTypes?.find(t => t.id === typeId);\n    const typeName = typeInfo?.name || 'Unknown';\n    \n    const principalAmount = parseFloat(investment.principalAmount);\n    const currentValue = calculateCurrentValue(investment);\n    \n    if (!acc[typeId]) {\n      const colorIndex = Object.keys(acc).length;\n      acc[typeId] = {\n        type: typeId,\n        label: typeName,\n        invested: 0,\n        current: 0,\n        color: CHART_COLORS[colorIndex % CHART_COLORS.length]\n      };\n    }\n    \n    acc[typeId].invested += principalAmount;\n    acc[typeId].current += currentValue;\n    return acc;\n  }, {} as Record<string, { type: string; label: string; invested: number; current: number; color: string }>) || {};\n\n  // Convert to chart data with the selected value type\n  const chartData = Object.values(allocationData).map(item => ({\n    ...item,\n    value: valueType === 'invested' ? item.invested : item.current\n  })).filter(item => item.value > 0);\n\n  const total = chartData.reduce((sum, item) => sum + item.value, 0);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return ((value / total) * 100).toFixed(1);\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Investment Allocation</h3>\n          <select \n            className=\"text-sm border border-border rounded-md px-3 py-1 bg-background text-foreground\"\n            value={valueType}\n            onChange={(e) => setValueType(e.target.value as 'invested' | 'current')}\n            data-testid=\"select-allocation-type\"\n          >\n            <option value=\"current\">Current Value</option>\n            <option value=\"invested\">Invested Amount</option>\n          </select>\n        </div>\n        \n        {chartData.length === 0 ? (\n          <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n            <p>No investments to display</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={chartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={100}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                  >\n                    {chartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    labelFormatter={(label) => `${label}`}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {chartData.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-4 h-4 rounded-full\" \n                      style={{ backgroundColor: item.color }}\n                    ></div>\n                    <span className=\"text-sm font-medium text-foreground\" data-testid={`allocation-${item.type}`}>\n                      {item.label}\n                    </span>\n                  </div>\n                  <span className=\"text-sm font-semibold text-foreground\">\n                    {formatCurrency(item.value)} ({formatPercentage(item.value)}%)\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6459},"client/src/components/dashboard-summary.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ArrowUp, Wallet, TrendingUp, Clock } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface DashboardSummary {\n  totalInvested: number;\n  currentValue: number;\n  totalGains: number;\n  gainsPercentage: number;\n  changeVsLastMonth: number;\n  upcomingPayments: number;\n  nextPaymentAmount: number | null;\n  nextPaymentDate: number | null;\n  nextPaymentName: string | null;\n}\n\nexport function DashboardSummary() {\n  const { data: summary, isLoading } = useQuery<DashboardSummary>({\n    queryKey: [\"/api/dashboard/summary\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-16 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\">Total Invested</p>\n              <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-total-invested\">\n                {formatCurrency(summary?.totalInvested || 0)}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Wallet className=\"text-primary\" size={24} />\n            </div>\n          </div>\n          <div className=\"flex items-center mt-4 text-sm\">\n            {summary?.changeVsLastMonth !== null && summary?.changeVsLastMonth !== undefined ? (\n              <>\n                <ArrowUp className={`${summary.changeVsLastMonth >= 0 ? 'text-green-500' : 'text-red-500'} mr-1`} size={16} />\n                <span className={`${summary.changeVsLastMonth >= 0 ? 'text-green-500' : 'text-red-500'} font-medium`}>\n                  {summary.changeVsLastMonth >= 0 ? '+' : ''}{summary.changeVsLastMonth.toFixed(1)}%\n                </span>\n                <span className=\"text-muted-foreground ml-2\">vs last month</span>\n              </>\n            ) : (\n              <span className=\"text-muted-foreground\">No previous month data</span>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\">Current Value</p>\n              <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-current-value\">\n                {formatCurrency(summary?.currentValue || 0)}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"text-green-500\" size={24} />\n            </div>\n          </div>\n          <div className=\"flex items-center mt-4 text-sm\">\n            <ArrowUp className=\"text-green-500 mr-1\" size={16} />\n            <span className=\"text-green-500 font-medium\">\n              {formatCurrency(summary?.totalGains || 0)}\n            </span>\n            <span className=\"text-muted-foreground ml-2\">total gains</span>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\">Due This Week</p>\n              <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-due-this-week\">\n                {summary?.upcomingPayments || 0}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-500/10 rounded-lg flex items-center justify-center\">\n              <Clock className=\"text-orange-500\" size={24} />\n            </div>\n          </div>\n          <div className=\"flex items-center mt-4 text-sm\">\n            <span className=\"text-muted-foreground\">Next payment: </span>\n            {summary?.nextPaymentAmount && summary?.nextPaymentDate ? (\n              <span className=\"text-foreground font-medium ml-1\">\n                {formatCurrency(summary.nextPaymentAmount)} on {summary.nextPaymentDate}{summary.nextPaymentDate === 1 ? 'st' : summary.nextPaymentDate === 2 ? 'nd' : summary.nextPaymentDate === 3 ? 'rd' : 'th'}\n              </span>\n            ) : (\n              <span className=\"text-muted-foreground font-medium ml-1\">No upcoming payments</span>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5109},"client/src/components/header.tsx":{"content":"import { Bell, ChartLine, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function Header() {\n  const [location] = useLocation();\n  \n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <ChartLine className=\"text-primary-foreground text-sm\" size={16} />\n            </div>\n            <Link href=\"/\">\n              <h1 className=\"text-xl font-semibold text-foreground cursor-pointer\">WealthTrack</h1>\n            </Link>\n          </div>\n          \n          <nav className=\"hidden md:flex space-x-6\">\n            <Link \n              href=\"/\" \n              className={`${isActive(\"/\") ? \"text-primary font-medium border-b-2 border-primary\" : \"text-muted-foreground hover:text-foreground\"} transition-colors pb-4`}\n              data-testid=\"nav-dashboard\"\n            >\n              Dashboard\n            </Link>\n            <Link \n              href=\"/investments\" \n              className={`${isActive(\"/investments\") ? \"text-primary font-medium border-b-2 border-primary\" : \"text-muted-foreground hover:text-foreground\"} transition-colors pb-4`}\n              data-testid=\"nav-investments\"\n            >\n              Investments\n            </Link>\n            <Link \n              href=\"/bills\" \n              className={`${isActive(\"/bills\") ? \"text-primary font-medium border-b-2 border-primary\" : \"text-muted-foreground hover:text-foreground\"} transition-colors pb-4`}\n              data-testid=\"nav-bills\"\n            >\n              Bills\n            </Link>\n            <Link \n              href=\"/reports\" \n              className={`${isActive(\"/reports\") ? \"text-primary font-medium border-b-2 border-primary\" : \"text-muted-foreground hover:text-foreground\"} transition-colors pb-4`}\n              data-testid=\"nav-reports\"\n            >\n              Reports\n            </Link>\n            <Link \n              href=\"/settings\" \n              className={`${isActive(\"/settings\") ? \"text-primary font-medium border-b-2 border-primary\" : \"text-muted-foreground hover:text-foreground\"} transition-colors pb-4`}\n              data-testid=\"nav-settings\"\n            >\n              Settings\n            </Link>\n          </nav>\n          \n          <div className=\"flex items-center space-x-4\">\n            <button \n              className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\" \n              data-testid=\"button-notifications\"\n            >\n              <Bell size={20} />\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                3\n              </span>\n            </button>\n            <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\" data-testid=\"avatar-user\">\n              <User className=\"text-muted-foreground\" size={16} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3452},"client/src/components/investment-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Investment, InvestmentType } from \"@shared/schema\";\nimport { Eye, Edit, Trash2, Search, PieChart, Banknote, Coins, Shield, Landmark } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Dynamic icon mapping for investment types\nconst getTypeIcon = (name: string) => {\n  const defaultIcons: { [key: string]: any } = {\n    mutual: PieChart,\n    fund: PieChart,\n    fixed: Banknote,\n    deposit: Banknote,\n    recurring: Coins,\n    lic: Shield,\n    insurance: Shield,\n    ppf: Landmark,\n    stock: PieChart,\n    equity: PieChart\n  };\n  \n  const lowerName = name.toLowerCase();\n  for (const [key, icon] of Object.entries(defaultIcons)) {\n    if (lowerName.includes(key)) {\n      return icon;\n    }\n  }\n  \n  return PieChart; // Default icon\n};\n\n// Dynamic color generation for investment types\nconst getTypeColor = (index: number) => {\n  const colors = [\n    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n    'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n    'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n    'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',\n    'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n    'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200',\n    'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200',\n    'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200',\n    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n    'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n  ];\n  return colors[index % colors.length];\n};\n\ninterface InvestmentTableProps {\n  onEditInvestment?: (investment: Investment) => void;\n}\n\nexport function InvestmentTable({ onEditInvestment }: InvestmentTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: investments, isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n  \n  const { data: investmentTypes } = useQuery<InvestmentType[]>({\n    queryKey: [\"/api/investment-types\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/investments/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/summary\"] });\n      toast({\n        title: \"Success\",\n        description: \"Investment deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete investment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const filteredInvestments = investments?.filter(investment => {\n    const matchesSearch = investment.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = !typeFilter || investment.type === typeFilter;\n    return matchesSearch && matchesType;\n  }) || [];\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const calculateCurrentValue = (investment: Investment) => {\n    const principal = parseFloat(investment.principalAmount);\n    const annualReturnRate = investment.expectedReturn ? parseFloat(investment.expectedReturn) / 100 : 0.08;\n    \n    // Calculate months elapsed since start date\n    const startDate = new Date(investment.startDate);\n    const currentDate = new Date();\n    const monthsElapsed = Math.max(0, (currentDate.getFullYear() - startDate.getFullYear()) * 12 + (currentDate.getMonth() - startDate.getMonth()));\n    \n    // Simple annual compounding: principal * (1 + rate)^years\n    const yearsElapsed = monthsElapsed / 12;\n    return principal * Math.pow(1 + annualReturnRate, yearsElapsed);\n  };\n\n  const calculateReturns = (investment: Investment) => {\n    if (!investment.expectedReturn) return 0;\n    \n    // For simplicity, just return the expected return rate as set by user\n    // This is what users expect to see - the rate they entered\n    return parseFloat(investment.expectedReturn);\n  };\n\n  const getNextPaymentDate = (investment: Investment) => {\n    if (investment.paymentFrequency === 'one_time' || !investment.dueDay || !investment.startDate) {\n      return 'One-time';\n    }\n    \n    const today = new Date();\n    const startDate = new Date(investment.startDate);\n    const startYear = startDate.getFullYear();\n    const startMonth = startDate.getMonth();\n    \n    // Normalize dates to day precision (remove time component)\n    const startOfDay = (date: Date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const anchor = new Date(Math.max(startOfDay(startDate).getTime(), startOfDay(today).getTime()));\n    \n    // Helper to clamp day to valid range for given month/year\n    const clampDay = (year: number, month: number, day: number) => {\n      const daysInMonth = new Date(year, month + 1, 0).getDate();\n      return Math.min(day, daysInMonth);\n    };\n    \n    // Calculate next occurrence based on frequency\n    let nextDue: Date | null = null;\n    \n    switch (investment.paymentFrequency) {\n      case 'monthly': {\n        // Find next month where due date >= anchor\n        let targetYear = anchor.getFullYear();\n        let targetMonth = anchor.getMonth();\n        \n        do {\n          const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n          nextDue = new Date(targetYear, targetMonth, clampedDay);\n          \n          if (nextDue >= anchor) break;\n          \n          targetMonth++;\n          if (targetMonth > 11) {\n            targetMonth = 0;\n            targetYear++;\n          }\n        } while (true);\n        break;\n      }\n      \n      case 'quarterly': {\n        // Find next quarter cycle from start month\n        let k = 0;\n        do {\n          const targetMonth = (startMonth + k * 3) % 12;\n          const targetYear = startYear + Math.floor((startMonth + k * 3) / 12);\n          const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n          nextDue = new Date(targetYear, targetMonth, clampedDay);\n          \n          if (nextDue >= anchor) break;\n          k++;\n        } while (k < 100); // Safety limit\n        break;\n      }\n      \n      case 'half_yearly': {\n        // Find next half-year cycle from start month\n        let k = 0;\n        do {\n          const targetMonth = (startMonth + k * 6) % 12;\n          const targetYear = startYear + Math.floor((startMonth + k * 6) / 12);\n          const clampedDay = clampDay(targetYear, targetMonth, investment.dueDay);\n          nextDue = new Date(targetYear, targetMonth, clampedDay);\n          \n          if (nextDue >= anchor) break;\n          k++;\n        } while (k < 50); // Safety limit\n        break;\n      }\n      \n      case 'yearly': {\n        // Find next year cycle from start date\n        let targetYear = startYear;\n        do {\n          const clampedDay = clampDay(targetYear, startMonth, investment.dueDay);\n          nextDue = new Date(targetYear, startMonth, clampedDay);\n          \n          if (nextDue >= anchor) break;\n          targetYear++;\n        } while (targetYear < startYear + 50); // Safety limit\n        break;\n      }\n      \n      default:\n        return 'Unknown';\n    }\n    \n    if (!nextDue) return 'Error';\n    \n    // Check if investment has ended/matured\n    if (investment.maturityDate && nextDue > new Date(investment.maturityDate)) {\n      return 'Matured';\n    }\n    \n    // Check if investment is inactive\n    if (!investment.isActive) {\n      return 'Inactive';\n    }\n    \n    return nextDue.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });\n  };\n\n  const getStatusBadge = (investment: Investment) => {\n    const today = new Date();\n    if (!investment.isActive) {\n      return <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\">Inactive</span>;\n    }\n    \n    if (investment.paymentFrequency !== 'one_time' && investment.dueDay) {\n      const dueDate = new Date(today.getFullYear(), today.getMonth(), investment.dueDay);\n      if (dueDate < today) {\n        dueDate.setMonth(dueDate.getMonth() + 1);\n      }\n      \n      const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysUntilDue === 0) {\n        return <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">Due Today</span>;\n      } else if (daysUntilDue <= 7) {\n        return <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">Due Soon</span>;\n      }\n    }\n    \n    return <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Active</span>;\n  };\n\n  const handleDelete = (id: string, name: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6 border-b border-border\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Investment Portfolio</h3>\n          <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n            <select \n              className=\"text-sm border border-border rounded-md px-3 py-2 bg-background text-foreground\"\n              value={typeFilter}\n              onChange={(e) => setTypeFilter(e.target.value)}\n              data-testid=\"select-investment-type\"\n            >\n              <option value=\"\">All Types</option>\n              {investmentTypes?.map((type) => (\n                <option key={type.id} value={type.id}>\n                  {type.name}\n                </option>\n              ))}\n            </select>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n              <input \n                type=\"text\" \n                placeholder=\"Search investments...\" \n                className=\"pl-10 pr-4 py-2 text-sm border border-border rounded-md bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search-investments\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      \n      {filteredInvestments.length === 0 ? (\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <p>No investments found</p>\n          </div>\n        </CardContent>\n      ) : (\n        <>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted/50\">\n                <tr>\n                  <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Investment</th>\n                  <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Type</th>\n                  <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Invested</th>\n                  <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Current Value</th>\n                  <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Returns</th>\n                  <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Next Payment</th>\n                  <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {filteredInvestments.map((investment, index) => {\n                  const typeInfo = investmentTypes?.find(t => t.id === investment.type);\n                  const typeName = typeInfo?.name || 'Unknown';\n                  const IconComponent = getTypeIcon(typeName);\n                  const currentValue = calculateCurrentValue(investment);\n                  const returns = calculateReturns(investment);\n                  const typeIndex = investmentTypes?.findIndex(t => t.id === investment.type) ?? 0;\n                  \n                  return (\n                    <tr key={investment.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-investment-${investment.id}`}>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                            <IconComponent className=\"text-blue-500\" size={20} />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-foreground\">{investment.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {investment.expectedReturn ? `${investment.expectedReturn}%` : 'N/A'} • {investment.paymentFrequency.replace('_', ' ')}\n                            </p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(typeIndex)}`} data-testid={`type-${investment.type}`}>\n                          {typeName}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 text-right text-foreground font-medium\">\n                        {formatCurrency(investment.principalAmount)}\n                      </td>\n                      <td className=\"px-6 py-4 text-right text-foreground font-medium\">\n                        {formatCurrency(currentValue.toString())}\n                      </td>\n                      <td className=\"px-6 py-4 text-right\">\n                        <div className=\"flex items-center justify-end space-x-1\">\n                          <span className={`font-medium ${returns >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                            {returns >= 0 ? '+' : ''}{returns.toFixed(1)}%\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 text-center\">\n                        {getStatusBadge(investment)}\n                      </td>\n                      <td className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                        {getNextPaymentDate(investment)}\n                      </td>\n                      <td className=\"px-6 py-4 text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <button \n                            className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\" \n                            title=\"View Details\"\n                            data-testid={`button-view-${investment.id}`}\n                          >\n                            <Eye size={16} />\n                          </button>\n                          <button \n                            className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\" \n                            title=\"Edit\"\n                            onClick={() => onEditInvestment?.(investment)}\n                            data-testid={`button-edit-${investment.id}`}\n                          >\n                            <Edit size={16} />\n                          </button>\n                          <button \n                            className=\"p-2 text-destructive hover:text-destructive/80 transition-colors\" \n                            title=\"Delete\"\n                            onClick={() => handleDelete(investment.id, investment.name)}\n                            disabled={deleteMutation.isPending}\n                            data-testid={`button-delete-${investment.id}`}\n                          >\n                            <Trash2 size={16} />\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          <CardContent className=\"px-6 py-4 border-t border-border\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                Showing <span className=\"font-medium\">1-{filteredInvestments.length}</span> of <span className=\"font-medium\">{filteredInvestments.length}</span> investments\n              </p>\n            </div>\n          </CardContent>\n        </>\n      )}\n    </Card>\n  );\n}\n","size_bytes":18157},"client/src/components/upcoming-payments.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Investment } from \"@shared/schema\";\nimport { TrendingUp, TrendingDown, Calendar, Plus } from \"lucide-react\";\n\ninterface PortfolioInsight {\n  investment: Investment;\n  currentValue: number;\n  gains: number;\n  gainsPercentage: number;\n  monthsInvested: number;\n}\n\nexport function PortfolioPerformance() {\n  const { data: investments, isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-muted rounded w-1/2 mb-4\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  // Calculate portfolio insights\n  const portfolioInsights: PortfolioInsight[] = investments\n    ?.filter(inv => inv.isActive)\n    .map(investment => {\n      const principal = parseFloat(investment.principalAmount);\n      const returnRate = investment.expectedReturn ? parseFloat(investment.expectedReturn) / 100 : 0.08;\n      const startDate = new Date(investment.startDate);\n      const currentDate = new Date();\n      const months = Math.max(0, Math.floor((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 30)));\n      \n      // Skip future-dated investments\n      if (startDate > currentDate) {\n        return {\n          investment,\n          currentValue: principal,\n          gains: 0,\n          gainsPercentage: 0,\n          monthsInvested: 0\n        };\n      }\n      \n      const currentValue = principal * Math.pow(1 + returnRate/12, months);\n      const gains = currentValue - principal;\n      const gainsPercentage = principal > 0 ? (gains / principal * 100) : 0;\n\n      return {\n        investment,\n        currentValue,\n        gains,\n        gainsPercentage,\n        monthsInvested: months\n      };\n    })\n    .sort((a, b) => b.gainsPercentage - a.gainsPercentage) || [];\n\n  const topPerformers = portfolioInsights.slice(0, 3);\n  const recentInvestments = portfolioInsights\n    .sort((a, b) => new Date(b.investment.createdAt).getTime() - new Date(a.investment.createdAt).getTime())\n    .slice(0, 2);\n\n  const hasInvestments = portfolioInsights.length > 0;\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Portfolio Performance</h3>\n        \n        {!hasInvestments ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Plus className=\"mx-auto mb-2 h-8 w-8 text-muted-foreground/50\" />\n            <p className=\"text-sm\">Start tracking your investments</p>\n            <p className=\"text-xs\">Add your first investment to see insights</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Top Performers */}\n            <div>\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Top Performers</h4>\n              <div className=\"space-y-3\">\n                {topPerformers.map((insight, index) => (\n                  <div \n                    key={insight.investment.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30\"\n                    data-testid={`performer-${insight.investment.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex items-center space-x-1\">\n                        {insight.gainsPercentage >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                        )}\n                        <span className={`text-xs font-medium ${\n                          insight.gainsPercentage >= 0 ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {insight.gainsPercentage >= 0 ? '+' : ''}{insight.gainsPercentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-foreground text-sm\">\n                          {insight.investment.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground capitalize\">\n                          {insight.investment.type.replace('_', ' ')}\n                        </p>\n                      </div>\n                    </div>\n                    <span className=\"text-sm font-semibold text-foreground\">\n                      {formatCurrency(insight.currentValue)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div>\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Recent Activity</h4>\n              <div className=\"space-y-3\">\n                {recentInvestments.map((insight) => (\n                  <div \n                    key={insight.investment.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800\"\n                    data-testid={`recent-${insight.investment.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Calendar className=\"h-3 w-3 text-blue-500\" />\n                      <div>\n                        <p className=\"font-medium text-foreground text-sm\">\n                          {insight.investment.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Added {new Date(insight.investment.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <span className=\"text-sm font-semibold text-foreground\">\n                      {formatCurrency(parseFloat(insight.investment.principalAmount))}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6682},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/bills.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Bill, BillPayment, InsertBill, BillCategory } from \"@shared/schema\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Calendar,\n  CalendarDays,\n  DollarSign,\n  AlertCircle,\n  Clock,\n  TrendingUp,\n  TrendingDown,\n  PieChart as PieChartIcon,\n  BarChart3,\n  Download,\n  Receipt,\n  CreditCard,\n  Home,\n  Car,\n  Phone,\n  Zap,\n  ShoppingCart,\n  Heart,\n  Play\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertBillSchema, insertBillPaymentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\n\n// Dynamic color generation for bill categories\nconst getCategoryColor = (index: number) => {\n  const colors = [\n    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n    'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n    'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n    'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n    'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',\n    'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200',\n    'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200',\n    'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200',\n    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n    'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n  ];\n  return colors[index % colors.length];\n};\n\n// Dynamic icon mapping for bill categories\nconst getCategoryIcon = (name: string) => {\n  const defaultIcons: { [key: string]: any } = {\n    utilities: Zap,\n    subscriptions: Play,\n    insurance: ShoppingCart,\n    loans: CreditCard,\n    groceries: ShoppingCart,\n    transport: Car,\n    healthcare: Heart,\n    entertainment: Play,\n    other: Receipt\n  };\n  \n  // Try to match by name (case insensitive)\n  const lowerName = name.toLowerCase();\n  for (const [key, icon] of Object.entries(defaultIcons)) {\n    if (lowerName.includes(key)) {\n      return icon;\n    }\n  }\n  \n  // Default icon\n  return Receipt;\n};\n\nconst CHART_COLORS = ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B', '#EF4444', '#06B6D4', '#6B7280', '#EC4899', '#84CC16'];\n\ninterface MonthlyTotal {\n  month: number;\n  monthName: string;\n  projected: number;\n  actual: number;\n}\n\ninterface BillsSummary {\n  totalMonthlyBills: number;\n  totalQuarterlyBills: number;\n  totalYearlyBills: number;\n  monthlyEquivalent: number;\n  billsDueThisWeek: number;\n  activeBillsCount: number;\n  categoryBreakdown: Record<string, { total: number; count: number }>;\n  monthlyTotals: MonthlyTotal[];\n  year: number;\n}\n\nconst billFormSchema = insertBillSchema.extend({\n  amount: z.string().min(1, \"Amount is required\"),\n  dueDay: z.coerce.number().min(1).max(31).optional(),\n  reminderDays: z.coerce.number().min(0).max(30).optional(),\n});\n\nexport default function Bills() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingBill, setEditingBill] = useState<Bill | null>(null);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [isRecordPaymentModalOpen, setIsRecordPaymentModalOpen] = useState(false);\n  const [selectedBillForPayment, setSelectedBillForPayment] = useState<Bill | null>(null);\n  const [selectedBillPayments, setSelectedBillPayments] = useState<BillPayment[]>([]);\n  const [editingPayment, setEditingPayment] = useState<BillPayment | null>(null);\n  const [showNewPaymentForm, setShowNewPaymentForm] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: bills, isLoading: billsLoading } = useQuery<Bill[]>({\n    queryKey: [\"/api/bills\"],\n  });\n\n  const { data: billCategories, isLoading: billCategoriesLoading } = useQuery<BillCategory[]>({\n    queryKey: [\"/api/bill-categories\"],\n  });\n\n  const { data: summary, isLoading: summaryLoading } = useQuery<BillsSummary>({\n    queryKey: [\"/api/bills/summary\", selectedYear],\n    queryFn: () => fetch(`/api/bills/summary?year=${selectedYear}`).then(res => res.json()),\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: (data: { billId: string; amount: number; paidDate: string; dueDate: string; status: string }) =>\n      apiRequest(\"POST\", `/api/bills/${data.billId}/payments`, {\n        amount: data.amount,\n        paidDate: data.paidDate,\n        dueDate: data.dueDate,\n        status: data.status,\n      }),\n    onSuccess: () => {\n      toast({ title: \"Payment recorded successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\", selectedYear] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      handleClosePaymentModal();\n    },\n    onError: () => {\n      toast({ title: \"Failed to record payment\", variant: \"destructive\" });\n    },\n  });\n\n  const updatePaymentMutation = useMutation({\n    mutationFn: (data: { id: string; amount: number; paidDate: string; dueDate: string; status: string }) =>\n      apiRequest(\"PUT\", `/api/bill-payments/${data.id}`, {\n        amount: data.amount,\n        paidDate: data.paidDate,\n        dueDate: data.dueDate,\n        status: data.status,\n      }),\n    onSuccess: () => {\n      toast({ title: \"Payment updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\", selectedYear] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      handleClosePaymentModal();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update payment\", variant: \"destructive\" });\n    },\n  });\n\n  const deletePaymentMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/bill-payments/${id}`),\n    onSuccess: () => {\n      toast({ title: \"Payment deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\", selectedYear] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      handleClosePaymentModal();\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete payment\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/bills/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\"] });\n      toast({\n        title: \"Success\",\n        description: \"Bill deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: z.infer<typeof billFormSchema>) => {\n      const submitData = {\n        ...data,\n        amount: data.amount,\n        nextDueDate: data.frequency !== 'one_time' && data.dueDay ? \n          new Date(new Date().getFullYear(), new Date().getMonth(), data.dueDay).toISOString().split('T')[0] : \n          null\n      };\n      return apiRequest(\"POST\", \"/api/bills\", submitData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\"] });\n      setIsAddModalOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Bill added successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: z.infer<typeof billFormSchema> }) => {\n      const submitData = {\n        ...data,\n        amount: data.amount,\n        nextDueDate: data.frequency !== 'one_time' && data.dueDay ? \n          new Date(new Date().getFullYear(), new Date().getMonth(), data.dueDay).toISOString().split('T')[0] : \n          null\n      };\n      return apiRequest(\"PUT\", `/api/bills/${id}`, submitData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills/summary\"] });\n      setIsAddModalOpen(false);\n      setEditingBill(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Bill updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof billFormSchema>>({\n    resolver: zodResolver(billFormSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"utilities\",\n      amount: \"\",\n      frequency: \"monthly\",\n      dueDay: undefined,\n      description: \"\",\n      vendor: \"\",\n      isActive: true,\n      isRecurring: true,\n      reminderDays: 3,\n    },\n  });\n\n  const paymentFormSchema = insertBillPaymentSchema;\n\n  const paymentForm = useForm<z.infer<typeof paymentFormSchema>>({\n    resolver: zodResolver(paymentFormSchema),\n    defaultValues: {\n      amount: 0,\n      billId: \"\",\n      paidDate: new Date().toISOString().split('T')[0],\n      dueDate: new Date().toISOString().split('T')[0],\n      status: \"paid\",\n    },\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(typeof amount === 'string' ? parseFloat(amount) : amount);\n  };\n\n  const getFilteredBills = () => {\n    if (!bills) return [];\n\n    return bills.filter(bill => {\n      const matchesSearch = bill.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          bill.vendor?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          false;\n      const matchesCategory = categoryFilter === \"all\" || bill.category === categoryFilter;\n      const matchesStatus = statusFilter === \"all\" || \n        (statusFilter === \"active\" && bill.isActive) ||\n        (statusFilter === \"inactive\" && !bill.isActive);\n      return matchesSearch && matchesCategory && matchesStatus;\n    });\n  };\n\n  const handleEditBill = (bill: Bill) => {\n    setEditingBill(bill);\n    form.reset({\n      name: bill.name,\n      category: bill.category,\n      amount: bill.amount,\n      frequency: bill.frequency,\n      dueDay: bill.dueDay || undefined,\n      description: bill.description || \"\",\n      vendor: bill.vendor || \"\",\n      isActive: bill.isActive,\n      isRecurring: bill.isRecurring,\n      reminderDays: bill.reminderDays || 3,\n    });\n    setIsAddModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingBill(null);\n    form.reset();\n  };\n\n  const handleClosePaymentModal = () => {\n    setIsRecordPaymentModalOpen(false);\n    setSelectedBillForPayment(null);\n    setSelectedBillPayments([]);\n    setEditingPayment(null);\n    setShowNewPaymentForm(false);\n    paymentForm.reset();\n  };\n\n  const handleRecordPayment = async (bill: Bill) => {\n    setSelectedBillForPayment(bill);\n    setEditingPayment(null);\n    // Fetch existing payments for this bill\n    try {\n      const response = await fetch(`/api/bills/${bill.id}/payments`);\n      if (response.ok) {\n        const payments = await response.json();\n        setSelectedBillPayments(payments);\n      }\n    } catch (error) {\n      console.error('Failed to fetch payments:', error);\n      setSelectedBillPayments([]);\n    }\n    paymentForm.reset({\n      amount: parseFloat(bill.amount),\n      billId: bill.id,\n      paidDate: new Date().toISOString().split('T')[0],\n      dueDate: new Date().toISOString().split('T')[0],\n      status: \"paid\",\n    });\n    setShowNewPaymentForm(selectedBillPayments.length === 0);\n    setIsRecordPaymentModalOpen(true);\n  };\n\n  const handleRecordPaymentSubmit = (data: z.infer<typeof paymentFormSchema>) => {\n    if (editingPayment) {\n      // Update existing payment\n      updatePaymentMutation.mutate({\n        id: editingPayment.id,\n        amount: data.amount,\n        paidDate: data.paidDate,\n        dueDate: data.dueDate,\n        status: data.status || \"paid\",\n      });\n    } else {\n      // Create new payment\n      recordPaymentMutation.mutate({\n        billId: data.billId,\n        amount: data.amount,\n        paidDate: data.paidDate,\n        dueDate: data.dueDate,\n        status: data.status || \"paid\",\n      });\n    }\n    setShowNewPaymentForm(false);\n  };\n\n  const handleEditPayment = (payment: BillPayment) => {\n    setEditingPayment(payment);\n    paymentForm.reset({\n      amount: parseFloat(payment.amount),\n      billId: payment.billId,\n      paidDate: payment.paidDate,\n      dueDate: payment.dueDate,\n      status: payment.status,\n    });\n  };\n\n  const handleDeletePayment = (paymentId: string) => {\n    if (confirm(\"Are you sure you want to delete this payment?\")) {\n      deletePaymentMutation.mutate(paymentId);\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'paid': return 'default';\n      case 'cancelled': return 'destructive';\n      case 'overdue': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'paid': return 'Paid';\n      case 'cancelled': return 'Cancelled';\n      case 'overdue': return 'Overdue';\n      default: return status;\n    }\n  };\n\n  const handleDelete = (id: string, name: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof billFormSchema>) => {\n    if (editingBill) {\n      updateMutation.mutate({ id: editingBill.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const getNextDueDate = (bill: Bill) => {\n    if (bill.frequency === 'one_time' || !bill.dueDay) {\n      return 'One-time';\n    }\n    \n    const today = new Date();\n    const nextDue = new Date(today.getFullYear(), today.getMonth(), bill.dueDay);\n    if (nextDue < today) {\n      nextDue.setMonth(nextDue.getMonth() + 1);\n    }\n    \n    return nextDue.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });\n  };\n\n  const getAnnualProjectedTotal = () => {\n    if (!summary?.monthlyTotals) return 0;\n    return summary.monthlyTotals.reduce((total, month) => total + month.projected, 0);\n  };\n\n  const getAnnualActualTotal = () => {\n    if (!summary?.monthlyTotals) return 0;\n    return summary.monthlyTotals.reduce((total, month) => total + month.actual, 0);\n  };\n\n  const getYTDActualTotal = () => {\n    if (!summary?.monthlyTotals) return 0;\n    // Only sum up to current month if viewing current year\n    const currentMonth = new Date().getMonth();\n    const isCurrentYear = selectedYear === new Date().getFullYear();\n    const monthsToSum = isCurrentYear ? currentMonth + 1 : 12;\n    return summary.monthlyTotals.slice(0, monthsToSum).reduce((total, month) => total + month.actual, 0);\n  };\n\n  const getYTDProjectedTotal = () => {\n    if (!summary?.monthlyTotals) return 0;\n    const currentMonth = new Date().getMonth();\n    const isCurrentYear = selectedYear === new Date().getFullYear();\n    const monthsToSum = isCurrentYear ? currentMonth + 1 : 12;\n    return summary.monthlyTotals.slice(0, monthsToSum).reduce((total, month) => total + month.projected, 0);\n  };\n\n  const getCategoryChartData = () => {\n    if (!summary?.categoryBreakdown) return [];\n    \n    return Object.entries(summary.categoryBreakdown).map(([category, data], index) => {\n      const categoryLabel = billCategories?.find(c => c.id === category)?.name || category;\n      return {\n        name: categoryLabel,\n        value: Math.round(data.total),\n        count: data.count,\n        color: CHART_COLORS[index % CHART_COLORS.length]\n      };\n    });\n  };\n\n  const filteredBills = getFilteredBills();\n\n  if (billsLoading || summaryLoading) {\n    return (\n      <div className=\"min-h-screen bg-background font-sans\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map((i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-20 bg-muted rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Bills Management</h2>\n              <p className=\"text-muted-foreground mt-1\">Track and manage your bills and expenses</p>\n            </div>\n            <Button \n              onClick={() => setIsAddModalOpen(true)}\n              data-testid=\"button-add-bill\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              Add Bill\n            </Button>\n          </div>\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Monthly Equivalent</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-monthly-equivalent\">\n                      {formatCurrency(summary?.monthlyEquivalent || 0)}\n                    </p>\n                  </div>\n                  <DollarSign className=\"text-blue-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Due This Week</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-due-this-week\">\n                      {summary?.billsDueThisWeek || 0}\n                    </p>\n                  </div>\n                  <AlertCircle className=\"text-orange-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Active Bills</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-active-bills\">\n                      {summary?.activeBillsCount || 0}\n                    </p>\n                  </div>\n                  <Receipt className=\"text-green-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Annual Actual</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-annual-total\">\n                      {formatCurrency(summary?.monthlyTotals?.reduce((sum, month) => sum + month.actual, 0) || 0)}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"text-purple-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"list\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"list\" data-testid=\"tab-bills-list\">\n                <Receipt className=\"mr-2\" size={16} />\n                Bills List\n              </TabsTrigger>\n              <TabsTrigger value=\"monthly\" data-testid=\"tab-bills-monthly\">\n                <Calendar className=\"mr-2\" size={16} />\n                Monthly\n              </TabsTrigger>\n              <TabsTrigger value=\"yearly\" data-testid=\"tab-bills-yearly\">\n                <TrendingUp className=\"mr-2\" size={16} />\n                Yearly\n              </TabsTrigger>\n              <TabsTrigger value=\"insights\" data-testid=\"tab-bills-insights\">\n                <BarChart3 className=\"mr-2\" size={16} />\n                Insights\n              </TabsTrigger>\n              <TabsTrigger value=\"comparison\" data-testid=\"tab-bills-comparison\">\n                <PieChartIcon className=\"mr-2\" size={16} />\n                Comparison\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Monthly Tracking Tab */}\n            <TabsContent value=\"monthly\">\n              <div className=\"space-y-6\">\n                {/* Year Selector */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span className=\"flex items-center\">\n                        <Calendar className=\"mr-2\" size={20} />\n                        Monthly Tracking - {selectedYear}\n                      </span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedYear(selectedYear - 1)}\n                          data-testid=\"button-previous-year\"\n                        >\n                          ←\n                        </Button>\n                        <span className=\"text-sm font-medium\">{selectedYear}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedYear(selectedYear + 1)}\n                          disabled={selectedYear >= new Date().getFullYear()}\n                          data-testid=\"button-next-year\"\n                        >\n                          →\n                        </Button>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {summaryLoading ? (\n                      <div className=\"animate-pulse space-y-4\">\n                        <div className=\"h-64 bg-muted rounded\"></div>\n                      </div>\n                    ) : (\n                      <div className=\"h-80\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <BarChart data={summary?.monthlyTotals || []}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis \n                              dataKey=\"monthName\" \n                              interval={0}\n                              angle={-45}\n                              textAnchor=\"end\"\n                              height={80}\n                            />\n                            <YAxis />\n                            <Tooltip \n                              formatter={(value: number) => [formatCurrency(value), 'Bills Paid']}\n                              labelFormatter={(label) => `${label} ${selectedYear}`}\n                            />\n                            <Bar dataKey=\"actual\" fill=\"#10B981\" name=\"Bills Paid\" radius={[4, 4, 0, 0]} />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Monthly Breakdown Table */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Monthly Breakdown</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {summaryLoading ? (\n                      <div className=\"animate-pulse space-y-2\">\n                        {Array.from({ length: 12 }).map((_, i) => (\n                          <div key={i} className=\"h-8 bg-muted rounded\"></div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead>\n                            <tr className=\"border-b\">\n                              <th className=\"text-left p-3\">Month</th>\n                              <th className=\"text-right p-3\">Bills Paid</th>\n                              <th className=\"text-center p-3\">Status</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {summary?.monthlyTotals?.map((month, index) => {\n                              const currentMonth = new Date().getMonth() + 1;\n                              const isCurrentMonth = month.month === currentMonth && selectedYear === new Date().getFullYear();\n                              const isPastMonth = selectedYear < new Date().getFullYear() || \n                                                (selectedYear === new Date().getFullYear() && month.month < currentMonth);\n                              \n                              return (\n                                <tr key={index} className={`border-b ${isCurrentMonth ? 'bg-blue-50 dark:bg-blue-950' : ''}`}>\n                                  <td className=\"p-3 font-medium\">{month.monthName}</td>\n                                  <td className={`p-3 text-right font-semibold ${\n                                    month.actual > 0 ? 'text-green-600' : 'text-muted-foreground'\n                                  }`}>\n                                    {month.actual > 0 ? formatCurrency(month.actual) : '-'}\n                                  </td>\n                                  <td className=\"p-3 text-center\">\n                                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                                      isCurrentMonth ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :\n                                      isPastMonth \n                                        ? (month.actual > 0 \n                                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' \n                                          : (month.projected > 0\n                                            ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'\n                                            : 'bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400'\n                                          )\n                                        )\n                                        : (month.projected > 0\n                                          ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                                          : 'bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400'\n                                        )\n                                    }`}>\n                                      {isCurrentMonth ? 'This Month' : \n                                       isPastMonth \n                                        ? (month.actual > 0 ? 'Paid' : (month.projected > 0 ? 'Unpaid' : 'No Bills'))\n                                        : (month.projected > 0 ? 'Upcoming' : 'No Bills')\n                                      }\n                                    </span>\n                                  </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Yearly Tracking Tab */}\n            <TabsContent value=\"yearly\">\n              <div className=\"space-y-6\">\n                {/* Annual Summary */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Annual Actual</p>\n                          <p className=\"text-2xl font-bold\">\n                            {formatCurrency(summary?.monthlyTotals?.reduce((sum, month) => sum + month.actual, 0) || 0)}\n                          </p>\n                        </div>\n                        <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Actual Year-to-Date</p>\n                          <p className=\"text-2xl font-bold\">\n                            {formatCurrency(getYTDActualTotal())}\n                          </p>\n                        </div>\n                        <CalendarDays className=\"h-8 w-8 text-green-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Average Monthly Spending</p>\n                          <p className=\"text-2xl font-bold\">\n                            {(() => {\n                              if (!summary?.monthlyTotals) return formatCurrency(0);\n                              \n                              const currentYear = new Date().getFullYear();\n                              const currentMonth = new Date().getMonth();\n                              const isCurrentYear = selectedYear === currentYear;\n                              \n                              // For current year, only count months that have passed (including current month)\n                              // For past years, count all 12 months\n                              const monthsToCount = isCurrentYear ? currentMonth + 1 : 12;\n                              \n                              // Sum actual payments for the months we're considering\n                              const totalActual = summary.monthlyTotals\n                                .slice(0, monthsToCount)\n                                .reduce((sum, month) => sum + month.actual, 0);\n                              \n                              const averageMonthly = monthsToCount > 0 ? totalActual / monthsToCount : 0;\n                              return formatCurrency(averageMonthly);\n                            })()}\n                          </p>\n                        </div>\n                        <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Quarterly Breakdown */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"mr-2\" size={20} />\n                      Quarterly Spending\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                      {[\n                        { name: 'Q1', months: [0, 1, 2], color: 'bg-blue-500' },\n                        { name: 'Q2', months: [3, 4, 5], color: 'bg-green-500' },\n                        { name: 'Q3', months: [6, 7, 8], color: 'bg-orange-500' },\n                        { name: 'Q4', months: [9, 10, 11], color: 'bg-purple-500' },\n                      ].map((quarter, index) => {\n                        const total = summary?.monthlyTotals\n                          ?.filter((_, monthIndex) => quarter.months.includes(monthIndex))\n                          .reduce((sum, month) => sum + month.actual, 0) || 0;\n                        \n                        return (\n                          <div key={index} className=\"p-4 border rounded-lg\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-medium\">{quarter.name}</h3>\n                              <div className={`w-3 h-3 rounded-full ${quarter.color}`}></div>\n                            </div>\n                            <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(total)}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {total > 0 ? 'Bills Paid' : 'No payments'} • {quarter.months.map(m => summary?.monthlyTotals?.[m]?.monthName?.slice(0, 3) ?? '?').join(', ')}\n                            </p>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Year-over-Year Comparison */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"mr-2\" size={20} />\n                      Year-over-Year Comparison\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <Clock className=\"mx-auto h-12 w-12 mb-4\" />\n                      <p className=\"text-lg font-medium\">Historical Data Coming Soon</p>\n                      <p className=\"text-sm\">\n                        Year-over-year comparisons will appear here once you have multiple years of data.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Bills List Tab */}\n            <TabsContent value=\"list\">\n              {/* Filters */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-4\">\n                    <div className=\"flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n                        <Input \n                          placeholder=\"Search bills...\" \n                          className=\"pl-10 w-64\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          data-testid=\"input-search-bills\"\n                        />\n                      </div>\n                      \n                      <Select value={categoryFilter} onValueChange={(value) => setCategoryFilter(value === \"all\" ? \"all\" : value)}>\n                        <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n                          <SelectValue placeholder=\"All Categories\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Categories</SelectItem>\n                          {billCategories?.map((category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n\n                      <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value === \"all\" ? \"all\" : value)}>\n                        <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                          <SelectValue placeholder=\"All Status\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Status</SelectItem>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Bills Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Bills ({filteredBills.length})</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {filteredBills.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <PieChartIcon className=\"mx-auto h-12 w-12 mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No bills found</h3>\n                      <p className=\"mb-4\">\n                        {searchTerm || categoryFilter !== \"all\" || statusFilter !== \"all\"\n                          ? 'Try adjusting your filters to see more results.'\n                          : 'Start by adding your first bill.'\n                        }\n                      </p>\n                      <Button onClick={() => setIsAddModalOpen(true)} data-testid=\"button-add-first-bill\">\n                        Add Bill\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-muted/50\">\n                          <tr>\n                            <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Bill</th>\n                            <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Category</th>\n                            <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Amount</th>\n                            <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Frequency</th>\n                            <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Next Due</th>\n                            <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Status</th>\n                            <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-border\">\n                          {filteredBills.map((bill) => {\n                            const categoryName = billCategories?.find(c => c.id === bill.category)?.name || bill.category;\n                            const IconComponent = getCategoryIcon(categoryName);\n                            \n                            return (\n                              <tr key={bill.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-bill-${bill.id}`}>\n                                <td className=\"px-6 py-4\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <div className=\"w-10 h-10 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                                      <IconComponent className=\"text-blue-500\" size={20} />\n                                    </div>\n                                    <div>\n                                      <p className=\"font-medium text-foreground\">{bill.name}</p>\n                                      <p className=\"text-sm text-muted-foreground\">\n                                        {bill.vendor || 'No vendor'}\n                                      </p>\n                                    </div>\n                                  </div>\n                                </td>\n                                <td className=\"px-6 py-4\">\n                                  {(() => {\n                                    const categoryIndex = billCategories?.findIndex(c => c.id === bill.category) ?? 0;\n                                    const categoryLabel = billCategories?.find(c => c.id === bill.category)?.name || bill.category;\n                                    return (\n                                      <Badge className={getCategoryColor(categoryIndex)}>\n                                        {categoryLabel}\n                                      </Badge>\n                                    );\n                                  })()}\n                                </td>\n                                <td className=\"px-6 py-4 text-right text-foreground font-medium\">\n                                  {formatCurrency(bill.amount)}\n                                </td>\n                                <td className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                                  {bill.frequency.replace('_', ' ')}\n                                </td>\n                                <td className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                                  {getNextDueDate(bill)}\n                                </td>\n                                <td className=\"px-6 py-4 text-center\">\n                                  <Badge variant={bill.isActive ? \"default\" : \"secondary\"}>\n                                    {bill.isActive ? 'Active' : 'Inactive'}\n                                  </Badge>\n                                </td>\n                                <td className=\"px-6 py-4 text-right\">\n                                  <div className=\"flex items-center justify-end space-x-2\">\n                                    <Button \n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      title=\"View Details\"\n                                      data-testid={`button-view-${bill.id}`}\n                                    >\n                                      <Eye size={16} />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      title=\"Record Payment\"\n                                      onClick={() => handleRecordPayment(bill)}\n                                      data-testid={`button-record-payment-${bill.id}`}\n                                    >\n                                      <CreditCard size={16} />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      title=\"Edit\"\n                                      onClick={() => handleEditBill(bill)}\n                                      data-testid={`button-edit-${bill.id}`}\n                                    >\n                                      <Edit size={16} />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      title=\"Delete\"\n                                      onClick={() => handleDelete(bill.id, bill.name)}\n                                      disabled={deleteMutation.isPending}\n                                      data-testid={`button-delete-${bill.id}`}\n                                    >\n                                      <Trash2 size={16} />\n                                    </Button>\n                                  </div>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Insights Tab */}\n            <TabsContent value=\"insights\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Category Breakdown Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <PieChartIcon className=\"mr-2\" size={20} />\n                      Category Breakdown\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={getCategoryChartData()}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={60}\n                            outerRadius={120}\n                            paddingAngle={2}\n                            dataKey=\"value\"\n                          >\n                            {getCategoryChartData().map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value: number) => [formatCurrency(value), 'Monthly Amount']} />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"mt-4 space-y-2\">\n                      {getCategoryChartData().map((item, index) => (\n                        <div key={item.name} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div \n                              className=\"w-3 h-3 rounded-full mr-2\" \n                              style={{ backgroundColor: item.color }}\n                            ></div>\n                            <span className=\"text-sm text-foreground\">{item.name}</span>\n                          </div>\n                          <span className=\"text-sm font-medium text-foreground\">\n                            {formatCurrency(item.value)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Frequency Analysis */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"mr-2\" size={20} />\n                      Frequency Analysis\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Monthly Bills</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {formatCurrency(summary?.totalMonthlyBills || 0)}\n                          </p>\n                        </div>\n                        <Calendar className=\"text-blue-500\" size={24} />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Quarterly Bills</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {formatCurrency(summary?.totalQuarterlyBills || 0)}\n                          </p>\n                        </div>\n                        <Calendar className=\"text-green-500\" size={24} />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Yearly Bills</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {formatCurrency(summary?.totalYearlyBills || 0)}\n                          </p>\n                        </div>\n                        <Calendar className=\"text-purple-500\" size={24} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Comparison Tab */}\n            <TabsContent value=\"comparison\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Monthly vs Annual Comparison */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"mr-2\" size={20} />\n                      Monthly vs Annual View\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      <div className=\"text-center\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">Monthly Equivalent</p>\n                        <p className=\"text-3xl font-bold text-foreground\">\n                          {formatCurrency(summary?.monthlyEquivalent || 0)}\n                        </p>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">Annual Projection</p>\n                        <p className=\"text-3xl font-bold text-foreground\">\n                          {formatCurrency(getAnnualProjectedTotal())}\n                        </p>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">Actual Year-to-Date</p>\n                        <p className=\"text-3xl font-bold text-foreground\">\n                          {formatCurrency(getAnnualActualTotal())}\n                        </p>\n                      </div>\n\n                      <div className=\"border-t pt-4\">\n                        <p className=\"text-sm text-muted-foreground mb-4\">Bill Distribution</p>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Monthly</span>\n                            <span className=\"text-sm font-medium\">\n                              {bills?.filter(b => b.frequency === 'monthly' && b.isActive).length || 0} bills\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Quarterly</span>\n                            <span className=\"text-sm font-medium\">\n                              {bills?.filter(b => b.frequency === 'quarterly' && b.isActive).length || 0} bills\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Yearly</span>\n                            <span className=\"text-sm font-medium\">\n                              {bills?.filter(b => b.frequency === 'yearly' && b.isActive).length || 0} bills\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">One-time</span>\n                            <span className=\"text-sm font-medium\">\n                              {bills?.filter(b => b.frequency === 'one_time' && b.isActive).length || 0} bills\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Upcoming Bills */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Clock className=\"mr-2\" size={20} />\n                      Upcoming Bills\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {bills?.filter(bill => {\n                        if (!bill.isActive || !bill.dueDay || bill.frequency === 'one_time') return false;\n                        const today = new Date();\n                        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n                        const dueDate = new Date(today.getFullYear(), today.getMonth(), bill.dueDay);\n                        if (dueDate < today) {\n                          dueDate.setMonth(dueDate.getMonth() + 1);\n                        }\n                        return dueDate <= nextWeek;\n                      }).slice(0, 5).map((bill) => (\n                        <div key={bill.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-orange-500/10 rounded-lg flex items-center justify-center\">\n                              <AlertCircle className=\"text-orange-500\" size={16} />\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-sm\">{bill.name}</p>\n                              <p className=\"text-xs text-muted-foreground\">{bill.vendor || 'No vendor'}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium text-sm\">{formatCurrency(bill.amount)}</p>\n                            <p className=\"text-xs text-muted-foreground\">{getNextDueDate(bill)}</p>\n                          </div>\n                        </div>\n                      )) || (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <Clock className=\"mx-auto h-8 w-8 mb-2\" />\n                          <p className=\"text-sm\">No bills due this week</p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      {/* Payment Management Modal */}\n      <Dialog open={isRecordPaymentModalOpen} onOpenChange={handleClosePaymentModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Manage Payments - {selectedBillForPayment?.name}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Existing Payments */}\n            {selectedBillPayments.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium mb-3\">Payment History</h3>\n                <div className=\"space-y-3\">\n                  {selectedBillPayments.map((payment) => (\n                    <div key={payment.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div>\n                          <p className=\"font-medium\">{formatCurrency(payment.amount)}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Paid: {new Date(payment.paidDate).toLocaleDateString()} | Due: {new Date(payment.dueDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={getStatusBadgeVariant(payment.status)}>\n                          {getStatusLabel(payment.status)}\n                        </Badge>\n                        <div className=\"flex space-x-1\">\n                          {payment.status !== 'paid' && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => updatePaymentMutation.mutate({\n                                id: payment.id, \n                                amount: parseFloat(payment.amount),\n                                paidDate: payment.paidDate,\n                                dueDate: payment.dueDate,\n                                status: 'paid'\n                              })}\n                              disabled={updatePaymentMutation.isPending}\n                            >\n                              Mark Paid\n                            </Button>\n                          )}\n                          {payment.status !== 'cancelled' && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => updatePaymentMutation.mutate({\n                                id: payment.id, \n                                amount: parseFloat(payment.amount),\n                                paidDate: payment.paidDate,\n                                dueDate: payment.dueDate,\n                                status: 'cancelled'\n                              })}\n                              disabled={updatePaymentMutation.isPending}\n                            >\n                              Cancel\n                            </Button>\n                          )}\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEditPayment(payment)}\n                          >\n                            <Edit size={14} />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDeletePayment(payment.id)}\n                            disabled={deletePaymentMutation.isPending}\n                          >\n                            <Trash2 size={14} />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Add New Payment Form */}\n            {(editingPayment !== null || selectedBillPayments.length === 0 || showNewPaymentForm) && (\n              <div>\n                <h3 className=\"text-lg font-medium mb-3\">\n                  {editingPayment ? 'Edit Payment' : 'Add New Payment'}\n                </h3>\n                <Form {...paymentForm}>\n                  <form onSubmit={paymentForm.handleSubmit(handleRecordPaymentSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Amount</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\" \n                                placeholder=\"0.00\" \n                                {...field}\n                                data-testid=\"input-amount\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-status\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"paid\">Paid</SelectItem>\n                                <SelectItem value=\"overdue\">Overdue</SelectItem>\n                                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"paidDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Paid Date</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"date\" \n                                {...field}\n                                data-testid=\"input-paid-date\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"dueDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Due Date</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"date\" \n                                {...field}\n                                data-testid=\"input-due-date\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      {editingPayment && (\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => {\n                            setEditingPayment(null);\n                            setShowNewPaymentForm(false);\n                            paymentForm.reset({\n                              amount: selectedBillForPayment ? parseFloat(selectedBillForPayment.amount) : 0,\n                              billId: selectedBillForPayment?.id || \"\",\n                              paidDate: new Date().toISOString().split('T')[0],\n                              dueDate: new Date().toISOString().split('T')[0],\n                              status: \"paid\",\n                            });\n                          }}\n                        >\n                          Cancel Edit\n                        </Button>\n                      )}\n                      <Button type=\"submit\" disabled={recordPaymentMutation.isPending || updatePaymentMutation.isPending}>\n                        {editingPayment \n                          ? (updatePaymentMutation.isPending ? \"Updating...\" : \"Update Payment\")\n                          : (recordPaymentMutation.isPending ? \"Adding...\" : \"Add Payment\")\n                        }\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            {selectedBillPayments.length > 0 && !editingPayment && !showNewPaymentForm && (\n              <div className=\"border-t pt-4\">\n                <div className=\"flex justify-between items-center\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      // Clear editing state and show new payment form\n                      setEditingPayment(null);\n                      setShowNewPaymentForm(true);\n                      paymentForm.reset({\n                        amount: selectedBillForPayment ? parseFloat(selectedBillForPayment.amount) : 0,\n                        billId: selectedBillForPayment?.id || \"\",\n                        paidDate: new Date().toISOString().split('T')[0],\n                        dueDate: new Date().toISOString().split('T')[0],\n                        status: \"paid\",\n                      });\n                    }}\n                  >\n                    <Plus size={16} className=\"mr-2\" />\n                    Add New Payment\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleClosePaymentModal}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Close button for new payments */}\n            {selectedBillPayments.length === 0 && !editingPayment && (\n              <div className=\"flex justify-end\">\n                <Button variant=\"outline\" onClick={handleClosePaymentModal}>\n                  Close\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add/Edit Bill Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingBill ? 'Edit Bill' : 'Add New Bill'}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bill Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Electricity Bill\" {...field} data-testid=\"input-bill-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"vendor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor/Provider</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., BSES\" {...field} value={field.value || \"\"} data-testid=\"input-bill-vendor\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bill-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {billCategories?.map((category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                          data-testid=\"input-bill-amount\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"frequency\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Frequency</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bill-frequency\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                          <SelectItem value=\"half_yearly\">Half Yearly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                          <SelectItem value=\"one_time\">One Time</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {form.watch(\"frequency\") !== \"one_time\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"dueDay\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Due Day (1-31)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"31\" \n                            placeholder=\"15\" \n                            {...field} \n                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                            data-testid=\"input-bill-due-day\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Additional notes about this bill...\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"textarea-bill-description\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Active</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Include this bill in calculations\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-bill-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reminderDays\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reminder Days Before</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"0\" \n                          max=\"30\" \n                          placeholder=\"3\" \n                          {...field} \n                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 3)}\n                          data-testid=\"input-bill-reminder-days\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleCloseModal}\n                  data-testid=\"button-cancel-bill\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-bill\"\n                >\n                  {editingBill ? 'Update Bill' : 'Add Bill'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":77312},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Header } from \"@/components/header\";\nimport { DashboardSummary } from \"@/components/dashboard-summary\";\nimport { AllocationChart } from \"@/components/allocation-chart\";\nimport { PortfolioPerformance } from \"@/components/upcoming-payments\";\nimport { InvestmentTable } from \"@/components/investment-table\";\nimport { AddInvestmentModal } from \"@/components/add-investment-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Investment } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingInvestment, setEditingInvestment] = useState<Investment | null>(null);\n  \n  const handleEditInvestment = (investment: Investment) => {\n    setEditingInvestment(investment);\n    setIsAddModalOpen(true);\n  };\n\n  const handleCloseModal = (open: boolean) => {\n    setIsAddModalOpen(open);\n    if (!open) {\n      setEditingInvestment(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Dashboard Overview</h2>\n              <p className=\"text-muted-foreground mt-1\">Track your investments and savings</p>\n            </div>\n            <Button \n              onClick={() => setIsAddModalOpen(true)}\n              className=\"mt-4 sm:mt-0\"\n              data-testid=\"button-add-investment\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              Add Investment\n            </Button>\n          </div>\n          \n          <DashboardSummary />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n          <div className=\"lg:col-span-2\">\n            <AllocationChart />\n          </div>\n          <PortfolioPerformance />\n        </div>\n\n        <InvestmentTable onEditInvestment={handleEditInvestment} />\n      </main>\n\n      <AddInvestmentModal \n        open={isAddModalOpen} \n        onOpenChange={handleCloseModal}\n        editingInvestment={editingInvestment}\n      />\n    </div>\n  );\n}\n","size_bytes":2345},"client/src/pages/investments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Investment, InvestmentType } from \"@shared/schema\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Eye, \n  Edit, \n  Trash2, \n  Download,\n  TrendingUp,\n  TrendingDown,\n  Calendar,\n  DollarSign,\n  PieChart,\n  BarChart3,\n  Target,\n  Clock\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AddInvestmentModal } from \"@/components/add-investment-modal\";\n\n// Dynamic color generation for investment types\nconst getTypeColor = (index: number) => {\n  const colors = [\n    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n    'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n    'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n    'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',\n    'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n    'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200',\n    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n    'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200',\n    'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200',\n    'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n  ];\n  return colors[index % colors.length];\n};\n\nexport default function Investments() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"table\">(\"table\");\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingInvestment, setEditingInvestment] = useState<Investment | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: investments, isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n\n  const { data: investmentTypes, isLoading: investmentTypesLoading } = useQuery<InvestmentType[]>({\n    queryKey: [\"/api/investment-types\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/investments/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/summary\"] });\n      toast({\n        title: \"Success\",\n        description: \"Investment deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete investment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(typeof amount === 'string' ? parseFloat(amount) : amount);\n  };\n\n  const calculateCurrentValue = (investment: Investment) => {\n    const principal = parseFloat(investment.principalAmount);\n    const returnRate = investment.expectedReturn ? parseFloat(investment.expectedReturn) / 100 : 0.08;\n    const months = Math.max(1, Math.floor((Date.now() - new Date(investment.startDate).getTime()) / (1000 * 60 * 60 * 24 * 30)));\n    return principal * Math.pow(1 + returnRate/12, months);\n  };\n\n  const calculateReturns = (investment: Investment) => {\n    const principal = parseFloat(investment.principalAmount);\n    const currentValue = calculateCurrentValue(investment);\n    return ((currentValue - principal) / principal) * 100;\n  };\n\n  const getFilteredAndSortedInvestments = () => {\n    if (!investments) return [];\n\n    let filtered = investments.filter(investment => {\n      const matchesSearch = investment.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = typeFilter === \"all\" || !typeFilter || investment.type === typeFilter;\n      const matchesStatus = statusFilter === \"all\" || !statusFilter || \n        (statusFilter === \"active\" && investment.isActive) ||\n        (statusFilter === \"inactive\" && !investment.isActive);\n      return matchesSearch && matchesType && matchesStatus;\n    });\n\n    return filtered.sort((a, b) => {\n      let aValue: any, bValue: any;\n      \n      switch (sortBy) {\n        case \"name\":\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case \"amount\":\n          aValue = parseFloat(a.principalAmount);\n          bValue = parseFloat(b.principalAmount);\n          break;\n        case \"returns\":\n          aValue = calculateReturns(a);\n          bValue = calculateReturns(b);\n          break;\n        case \"startDate\":\n          aValue = new Date(a.startDate);\n          bValue = new Date(b.startDate);\n          break;\n        default:\n          return 0;\n      }\n\n      if (sortOrder === \"asc\") {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n  };\n\n  const handleEditInvestment = (investment: Investment) => {\n    setEditingInvestment(investment);\n    setIsAddModalOpen(true);\n  };\n\n  const handleCloseModal = (open: boolean) => {\n    setIsAddModalOpen(open);\n    if (!open) {\n      setEditingInvestment(null);\n    }\n  };\n\n  const handleDelete = (id: string, name: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const exportToCSV = () => {\n    const filteredInvestments = getFilteredAndSortedInvestments();\n    if (!filteredInvestments.length) {\n      toast({\n        title: \"No data\",\n        description: \"No investments to export\",\n      });\n      return;\n    }\n    \n    const csvData = filteredInvestments.map(inv => {\n      const typeLabel = investmentTypes?.find(t => t.id === inv.type)?.name || inv.type;\n      return {\n        Name: inv.name,\n        Type: typeLabel,\n        'Principal Amount': inv.principalAmount,\n        'Current Value': calculateCurrentValue(inv).toFixed(2),\n        'Returns (%)': calculateReturns(inv).toFixed(2),\n        'Start Date': inv.startDate,\n        'Payment Frequency': inv.paymentFrequency,\n        'Expected Return': inv.expectedReturn || 'N/A',\n        'Maturity Date': inv.maturityDate || 'N/A',\n        Status: inv.isActive ? 'Active' : 'Inactive'\n      };\n    });\n\n    const escapeCSV = (value: string | number) => {\n      const stringValue = String(value);\n      if (stringValue.includes('\"')) {\n        return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n      }\n      return `\"${stringValue}\"`;\n    };\n\n    const bom = '\\uFEFF';\n    const csvContent = bom + [\n      Object.keys(csvData[0]).join(','),\n      ...csvData.map(row => Object.values(row).map(escapeCSV).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `investments-${new Date().toISOString().split('T')[0]}.csv`;\n    a.style.display = 'none';\n    a.setAttribute('data-testid', 'csv-download-link');\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Success\",\n      description: \"Investments exported successfully!\",\n    });\n  };\n\n  const filteredInvestments = getFilteredAndSortedInvestments();\n\n  const totalStats = {\n    totalInvested: filteredInvestments.reduce((sum, inv) => sum + parseFloat(inv.principalAmount), 0),\n    totalValue: filteredInvestments.reduce((sum, inv) => sum + calculateCurrentValue(inv), 0),\n    averageReturn: filteredInvestments.length > 0 ? \n      filteredInvestments.reduce((sum, inv) => sum + calculateReturns(inv), 0) / filteredInvestments.length : 0,\n    activeCount: filteredInvestments.filter(inv => inv.isActive).length\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background font-sans\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map((i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-20 bg-muted rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Investment Management</h2>\n              <p className=\"text-muted-foreground mt-1\">Manage and monitor all your investments</p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n              <Button \n                onClick={exportToCSV}\n                variant=\"outline\"\n                data-testid=\"button-export-investments\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                Export\n              </Button>\n              <Button \n                onClick={() => setIsAddModalOpen(true)}\n                data-testid=\"button-add-investment\"\n              >\n                <Plus className=\"mr-2\" size={16} />\n                Add Investment\n              </Button>\n            </div>\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Total Invested</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-total-invested\">\n                      {formatCurrency(totalStats.totalInvested)}\n                    </p>\n                  </div>\n                  <DollarSign className=\"text-blue-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Current Value</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-current-value\">\n                      {formatCurrency(totalStats.totalValue)}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"text-green-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Avg. Returns</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-avg-returns\">\n                      {totalStats.averageReturn.toFixed(1)}%\n                    </p>\n                  </div>\n                  <Target className=\"text-purple-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Active Investments</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-active-count\">\n                      {totalStats.activeCount}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"text-orange-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters and Search */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-4\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n                    <Input \n                      placeholder=\"Search investments...\" \n                      className=\"pl-10 w-64\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      data-testid=\"input-search\"\n                    />\n                  </div>\n                  \n                  <Select value={typeFilter} onValueChange={(value) => setTypeFilter(value === \"all\" ? \"\" : value)}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-type-filter\">\n                      <SelectValue placeholder=\"All Types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      {investmentTypes?.map((type) => (\n                        <SelectItem key={type.id} value={type.id}>\n                          {type.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value === \"all\" ? \"\" : value)}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={sortBy} onValueChange={setSortBy}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-sort-by\">\n                      <SelectValue placeholder=\"Sort by\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"name\">Name</SelectItem>\n                      <SelectItem value=\"amount\">Amount</SelectItem>\n                      <SelectItem value=\"returns\">Returns</SelectItem>\n                      <SelectItem value=\"startDate\">Start Date</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\n                    data-testid=\"button-sort-order\"\n                  >\n                    {sortOrder === \"asc\" ? <TrendingUp size={16} /> : <TrendingDown size={16} />}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Investments Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Investments ({filteredInvestments.length})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredInvestments.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <PieChart className=\"mx-auto h-12 w-12 mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No investments found</h3>\n                <p className=\"mb-4\">\n                  {searchTerm || typeFilter || statusFilter \n                    ? 'Try adjusting your filters to see more results.'\n                    : 'Start by adding your first investment.'\n                  }\n                </p>\n                <Button onClick={() => setIsAddModalOpen(true)} data-testid=\"button-add-first-investment\">\n                  Add Investment\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Investment</th>\n                      <th className=\"text-left px-6 py-3 text-sm font-medium text-muted-foreground\">Type</th>\n                      <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Invested</th>\n                      <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Current Value</th>\n                      <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Returns</th>\n                      <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-center px-6 py-3 text-sm font-medium text-muted-foreground\">Start Date</th>\n                      <th className=\"text-right px-6 py-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {filteredInvestments.map((investment) => {\n                      const currentValue = calculateCurrentValue(investment);\n                      const returns = calculateReturns(investment);\n                      \n                      return (\n                        <tr key={investment.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-investment-${investment.id}`}>\n                          <td className=\"px-6 py-4\">\n                            <div>\n                              <p className=\"font-medium text-foreground\">{investment.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {investment.expectedReturn ? `${investment.expectedReturn}%` : 'N/A'} • {investment.paymentFrequency.replace('_', ' ')}\n                              </p>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            {(() => {\n                              const typeIndex = investmentTypes?.findIndex(t => t.id === investment.type) ?? 0;\n                              const typeLabel = investmentTypes?.find(t => t.id === investment.type)?.name || investment.type;\n                              return (\n                                <Badge className={getTypeColor(typeIndex)}>\n                                  {typeLabel}\n                                </Badge>\n                              );\n                            })()}\n                          </td>\n                          <td className=\"px-6 py-4 text-right text-foreground font-medium\">\n                            {formatCurrency(investment.principalAmount)}\n                          </td>\n                          <td className=\"px-6 py-4 text-right text-foreground font-medium\">\n                            {formatCurrency(currentValue)}\n                          </td>\n                          <td className=\"px-6 py-4 text-right\">\n                            <span className={`font-medium ${returns >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                              {returns >= 0 ? '+' : ''}{returns.toFixed(1)}%\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 text-center\">\n                            <Badge variant={investment.isActive ? \"default\" : \"secondary\"}>\n                              {investment.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                            {new Date(investment.startDate).toLocaleDateString('en-GB')}\n                          </td>\n                          <td className=\"px-6 py-4 text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <Button \n                                variant=\"ghost\"\n                                size=\"sm\"\n                                title=\"View Details\"\n                                data-testid={`button-view-${investment.id}`}\n                              >\n                                <Eye size={16} />\n                              </Button>\n                              <Button \n                                variant=\"ghost\"\n                                size=\"sm\"\n                                title=\"Edit\"\n                                onClick={() => handleEditInvestment(investment)}\n                                data-testid={`button-edit-${investment.id}`}\n                              >\n                                <Edit size={16} />\n                              </Button>\n                              <Button \n                                variant=\"ghost\"\n                                size=\"sm\"\n                                title=\"Delete\"\n                                onClick={() => handleDelete(investment.id, investment.name)}\n                                disabled={deleteMutation.isPending}\n                                data-testid={`button-delete-${investment.id}`}\n                              >\n                                <Trash2 size={16} />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <AddInvestmentModal \n        open={isAddModalOpen} \n        onOpenChange={handleCloseModal}\n        editingInvestment={editingInvestment}\n      />\n    </div>\n  );\n}","size_bytes":23452},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Download, Calendar, TrendingUp, PieChart as PieChartIcon, BarChart3 } from \"lucide-react\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Investment } from \"@shared/schema\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from \"recharts\";\nimport { useState } from \"react\";\n\nconst COLORS = ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B', '#EF4444', '#06B6D4', '#6B7280'];\n\nexport default function Reports() {\n  const [timeRange, setTimeRange] = useState(\"6months\");\n  const [reportType, setReportType] = useState(\"performance\");\n\n  const { data: investments, isLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background font-sans\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-64 bg-muted rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getFilteredInvestments = () => {\n    if (!investments?.length) return [];\n    \n    const now = new Date();\n    let cutoffDate: Date;\n    \n    switch (timeRange) {\n      case \"3months\":\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\n        break;\n      case \"6months\":\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n        break;\n      case \"1year\":\n        cutoffDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n        break;\n      default: // \"all\"\n        cutoffDate = new Date(2000, 0, 1); // Far past date to include all\n    }\n    \n    return investments.filter(investment => new Date(investment.startDate) >= cutoffDate);\n  };\n\n  const calculatePerformanceData = () => {\n    const filteredInvestments = getFilteredInvestments();\n    if (!filteredInvestments.length) return [];\n    \n    return filteredInvestments.map(investment => {\n      const principal = parseFloat(investment.principalAmount);\n      const returnRate = investment.expectedReturn ? parseFloat(investment.expectedReturn) / 100 : 0.08;\n      const months = Math.max(1, Math.floor((Date.now() - new Date(investment.startDate).getTime()) / (1000 * 60 * 60 * 24 * 30)));\n      const currentValue = principal * Math.pow(1 + returnRate/12, months);\n      const gains = currentValue - principal;\n      const gainsPercentage = (gains / principal) * 100;\n\n      return {\n        name: investment.name.length > 15 ? investment.name.substring(0, 15) + '...' : investment.name,\n        principal,\n        currentValue,\n        gains,\n        gainsPercentage: gainsPercentage.toFixed(1),\n        type: investment.type\n      };\n    });\n  };\n\n  const calculateAllocationData = () => {\n    const filteredInvestments = getFilteredInvestments();\n    if (!filteredInvestments.length) return [];\n\n    const typeGroups = filteredInvestments.reduce((acc, investment) => {\n      const type = investment.type;\n      const amount = parseFloat(investment.principalAmount);\n      \n      if (!acc[type]) {\n        acc[type] = { \n          type, \n          value: 0, \n          count: 0,\n          name: type.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())\n        };\n      }\n      \n      acc[type].value += amount;\n      acc[type].count += 1;\n      return acc;\n    }, {} as Record<string, any>);\n\n    return Object.values(typeGroups);\n  };\n\n  const calculateMonthlyTrends = () => {\n    const filteredInvestments = getFilteredInvestments();\n    if (!filteredInvestments.length) return [];\n    \n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const currentDate = new Date();\n    const trends = [];\n\n    let monthsToShow = 6; // default\n    switch (timeRange) {\n      case \"3months\":\n        monthsToShow = 3;\n        break;\n      case \"6months\":\n        monthsToShow = 6;\n        break;\n      case \"1year\":\n        monthsToShow = 12;\n        break;\n      case \"all\":\n        monthsToShow = 24; // Show 2 years max for all time\n        break;\n    }\n\n    for (let i = monthsToShow - 1; i >= 0; i--) {\n      const month = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\n      const monthName = months[month.getMonth()];\n      \n      const monthlyInvestments = filteredInvestments.filter(inv => {\n        const startDate = new Date(inv.startDate);\n        return startDate <= month;\n      });\n\n      const totalInvested = monthlyInvestments.reduce((sum, inv) => sum + parseFloat(inv.principalAmount), 0);\n      const totalValue = monthlyInvestments.reduce((sum, inv) => {\n        const principal = parseFloat(inv.principalAmount);\n        const returnRate = inv.expectedReturn ? parseFloat(inv.expectedReturn) / 100 : 0.08;\n        const monthsElapsed = Math.max(1, Math.floor((month.getTime() - new Date(inv.startDate).getTime()) / (1000 * 60 * 60 * 24 * 30)));\n        return sum + (principal * Math.pow(1 + returnRate/12, monthsElapsed));\n      }, 0);\n\n      trends.push({\n        month: monthName,\n        invested: Math.round(totalInvested),\n        value: Math.round(totalValue),\n        gains: Math.round(totalValue - totalInvested)\n      });\n    }\n\n    return trends;\n  };\n\n  const performanceData = calculatePerformanceData();\n  const allocationData = calculateAllocationData();\n  const monthlyTrends = calculateMonthlyTrends();\n  const filteredInvestments = getFilteredInvestments();\n\n  const totalInvested = filteredInvestments.reduce((sum, inv) => sum + parseFloat(inv.principalAmount), 0);\n  const totalCurrentValue = performanceData.reduce((sum, item) => sum + item.currentValue, 0);\n  const totalGains = totalCurrentValue - totalInvested;\n  const totalGainsPercentage = totalInvested > 0 ? ((totalGains / totalInvested) * 100) : 0;\n\n  const exportToCSV = () => {\n    if (!filteredInvestments?.length) {\n      alert('No investment data to export');\n      return;\n    }\n    \n    const csvData = filteredInvestments.map(inv => ({\n      Name: inv.name,\n      Type: inv.type,\n      'Principal Amount': inv.principalAmount,\n      'Start Date': inv.startDate,\n      'Payment Frequency': inv.paymentFrequency,\n      'Expected Return': inv.expectedReturn || 'N/A',\n      'Maturity Date': inv.maturityDate || 'N/A',\n      Status: inv.isActive ? 'Active' : 'Inactive'\n    }));\n\n    // Escape quotes by doubling them and add UTF-8 BOM\n    const escapeCSV = (value: string | number) => {\n      const stringValue = String(value);\n      if (stringValue.includes('\"')) {\n        return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n      }\n      return `\"${stringValue}\"`;\n    };\n\n    const bom = '\\uFEFF'; // UTF-8 BOM for Excel compatibility\n    const csvContent = bom + [\n      Object.keys(csvData[0]).join(','),\n      ...csvData.map(row => Object.values(row).map(escapeCSV).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `wealth-track-report-${timeRange}-${new Date().toISOString().split('T')[0]}.csv`;\n    a.style.display = 'none';\n    a.setAttribute('data-testid', 'csv-download-link');\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    // Show success message\n    alert('Report exported successfully!');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Investment Reports</h2>\n              <p className=\"text-muted-foreground mt-1\">Analyze your portfolio performance and trends</p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n              <Select value={timeRange} onValueChange={setTimeRange}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"3months\">3 Months</SelectItem>\n                  <SelectItem value=\"6months\">6 Months</SelectItem>\n                  <SelectItem value=\"1year\">1 Year</SelectItem>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button \n                onClick={exportToCSV} \n                variant=\"outline\" \n                disabled={!filteredInvestments?.length}\n                data-testid=\"button-export-csv\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                Export CSV\n              </Button>\n            </div>\n          </div>\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Total Invested</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-total-invested-report\">\n                      {formatCurrency(totalInvested)}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"text-blue-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Current Value</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-current-value-report\">\n                      {formatCurrency(totalCurrentValue)}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"text-green-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Total Gains</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-total-gains-report\">\n                      {formatCurrency(totalGains)}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"text-green-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm font-medium\">Returns</p>\n                    <p className=\"text-2xl font-bold text-foreground mt-2\" data-testid=\"text-returns-report\">\n                      {totalGainsPercentage.toFixed(1)}%\n                    </p>\n                  </div>\n                  <PieChartIcon className=\"text-purple-500\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Charts */}\n        {filteredInvestments?.length === 0 ? (\n          <Card className=\"col-span-full\">\n            <CardContent className=\"p-12 text-center\">\n              <PieChartIcon className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Investment Data Available</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {timeRange === 'all' \n                  ? 'Add some investments to see your portfolio analytics and reports.'\n                  : `No investments found for the selected time range (${timeRange.replace('months', ' months').replace('year', ' year')}). Try selecting a different time range or add more investments.`\n                }\n              </p>\n              <Button onClick={() => window.location.href = '/'} data-testid=\"button-add-investments\">\n                Add Investments\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Performance Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"mr-2\" size={20} />\n                  Investment Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={performanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" tick={{ fontSize: 12 }} />\n                      <YAxis tick={{ fontSize: 12 }} />\n                      <Tooltip \n                        formatter={(value: number, name: string) => [\n                          formatCurrency(value), \n                          name === 'currentValue' ? 'Current Value' : 'Principal'\n                        ]}\n                      />\n                      <Bar dataKey=\"principal\" fill=\"#3B82F6\" name=\"principal\" />\n                      <Bar dataKey=\"currentValue\" fill=\"#10B981\" name=\"currentValue\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n          {/* Portfolio Allocation */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <PieChartIcon className=\"mr-2\" size={20} />\n                Portfolio Allocation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={allocationData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={120}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {allocationData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value: number) => [formatCurrency(value), 'Amount']} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              <div className=\"mt-4 space-y-2\">\n                {allocationData.map((item, index) => (\n                  <div key={item.type} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <div \n                        className=\"w-3 h-3 rounded-full mr-2\" \n                        style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                      ></div>\n                      <span className=\"text-sm text-foreground\">{item.name}</span>\n                    </div>\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {formatCurrency(item.value)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        )}\n\n        {/* Monthly Trends */}\n        {filteredInvestments?.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"mr-2\" size={20} />\n              Monthly Trends\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={monthlyTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip formatter={(value: number) => [formatCurrency(value)]} />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"invested\" \n                    stroke=\"#3B82F6\" \n                    strokeWidth={2} \n                    name=\"Invested\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"value\" \n                    stroke=\"#10B981\" \n                    strokeWidth={2} \n                    name=\"Current Value\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":18143},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { InvestmentType, BillCategory } from \"@shared/schema\";\nimport { \n  User, \n  Bell, \n  DollarSign, \n  Shield, \n  Download, \n  Upload,\n  Moon, \n  Sun, \n  Globe,\n  Palette,\n  Database,\n  Calendar,\n  Target,\n  TrendingUp,\n  Mail,\n  Smartphone,\n  Save,\n  RefreshCw,\n  Plus,\n  Edit,\n  Trash2,\n  Settings as SettingsIcon,\n  Tags,\n  FolderOpen,\n  FileText,\n  AlertCircle\n} from \"lucide-react\";\n\nconst investmentTypeSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  isDefault: z.boolean().optional()\n});\n\nconst billCategorySchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  isDefault: z.boolean().optional()\n});\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Profile settings\n  const [profileSettings, setProfileSettings] = useState({\n    firstName: \"John\",\n    lastName: \"Doe\", \n    email: \"john.doe@example.com\",\n    phone: \"+91 98765 43210\",\n    currency: \"INR\",\n    language: \"en\",\n    timezone: \"Asia/Kolkata\"\n  });\n\n  // Notification settings\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    paymentReminders: true,\n    performanceAlerts: true,\n    weeklyReports: true,\n    monthlyStatements: false,\n    marketUpdates: false\n  });\n\n  // Investment preferences\n  const [investmentSettings, setInvestmentSettings] = useState({\n    defaultCurrency: \"INR\",\n    riskTolerance: \"moderate\",\n    defaultReturnRate: \"8\",\n    autoReinvest: false,\n    compoundingFrequency: \"monthly\",\n    portfolioTarget: \"1000000\",\n    retirementGoal: \"5000000\"\n  });\n\n  // App preferences\n  const [appSettings, setAppSettings] = useState({\n    theme: \"system\",\n    compactMode: false,\n    showDecimals: true,\n    dateFormat: \"DD/MM/YYYY\",\n    autoRefresh: true,\n    refreshInterval: \"30\",\n    dashboardLayout: \"default\"\n  });\n\n  // Modal states\n  const [isAddInvestmentTypeOpen, setIsAddInvestmentTypeOpen] = useState(false);\n  const [isAddBillCategoryOpen, setIsAddBillCategoryOpen] = useState(false);\n  const [editingInvestmentType, setEditingInvestmentType] = useState<InvestmentType | null>(null);\n  const [editingBillCategory, setEditingBillCategory] = useState<BillCategory | null>(null);\n  const [isImporting, setIsImporting] = useState(false);\n\n  // Fetch custom investment types\n  const { data: investmentTypes, isLoading: investmentTypesLoading } = useQuery<InvestmentType[]>({\n    queryKey: [\"/api/investment-types\"],\n  });\n\n  // Fetch custom bill categories\n  const { data: billCategories, isLoading: billCategoriesLoading } = useQuery<BillCategory[]>({\n    queryKey: [\"/api/bill-categories\"],\n  });\n\n  // Investment type form\n  const investmentTypeForm = useForm<z.infer<typeof investmentTypeSchema>>({\n    resolver: zodResolver(investmentTypeSchema),\n    defaultValues: {\n      name: \"\",\n      isDefault: false,\n    },\n  });\n\n  // Bill category form\n  const billCategoryForm = useForm<z.infer<typeof billCategorySchema>>({\n    resolver: zodResolver(billCategorySchema),\n    defaultValues: {\n      name: \"\",\n      isDefault: false,\n    },\n  });\n\n  // Investment type mutations\n  const createInvestmentTypeMutation = useMutation({\n    mutationFn: (data: z.infer<typeof investmentTypeSchema>) =>\n      apiRequest(\"POST\", \"/api/investment-types\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investment-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      setIsAddInvestmentTypeOpen(false);\n      investmentTypeForm.reset();\n      toast({ title: \"Investment type created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create investment type\", variant: \"destructive\" });\n    },\n  });\n\n  const updateInvestmentTypeMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: z.infer<typeof investmentTypeSchema> }) =>\n      apiRequest(\"PUT\", `/api/investment-types/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investment-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      setIsAddInvestmentTypeOpen(false);\n      setEditingInvestmentType(null);\n      investmentTypeForm.reset();\n      toast({ title: \"Investment type updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update investment type\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteInvestmentTypeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/investment-types/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/investment-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      toast({ title: \"Investment type deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete investment type\", variant: \"destructive\" });\n    },\n  });\n\n  // Bill category mutations\n  const createBillCategoryMutation = useMutation({\n    mutationFn: (data: z.infer<typeof billCategorySchema>) =>\n      apiRequest(\"POST\", \"/api/bill-categories\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bill-categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      setIsAddBillCategoryOpen(false);\n      billCategoryForm.reset();\n      toast({ title: \"Bill category created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create bill category\", variant: \"destructive\" });\n    },\n  });\n\n  const updateBillCategoryMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: z.infer<typeof billCategorySchema> }) =>\n      apiRequest(\"PUT\", `/api/bill-categories/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bill-categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      setIsAddBillCategoryOpen(false);\n      setEditingBillCategory(null);\n      billCategoryForm.reset();\n      toast({ title: \"Bill category updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update bill category\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteBillCategoryMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/bill-categories/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bill-categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      toast({ title: \"Bill category deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete bill category\", variant: \"destructive\" });\n    },\n  });\n\n  // Import mutation\n  const importDataMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/data/import\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries();\n      setIsImporting(false);\n      toast({ title: \"Data imported successfully\" });\n    },\n    onError: () => {\n      setIsImporting(false);\n      toast({ title: \"Failed to import data\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSaveProfile = () => {\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile settings have been saved successfully.\",\n    });\n  };\n\n  const handleSaveNotifications = () => {\n    toast({\n      title: \"Notifications Updated\", \n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const handleSaveInvestments = () => {\n    toast({\n      title: \"Investment Preferences Updated\",\n      description: \"Your investment settings have been saved.\",\n    });\n  };\n\n  const handleSaveApp = () => {\n    toast({\n      title: \"App Settings Updated\",\n      description: \"Your app preferences have been saved.\",\n    });\n  };\n\n  const handleExportData = async () => {\n    try {\n      const response = await fetch(\"/api/data/export\");\n      if (!response.ok) throw new Error(\"Export failed\");\n      \n      const data = await response.json();\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: \"application/json\" });\n      const url = URL.createObjectURL(blob);\n      \n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `financial-data-export-${new Date().toISOString().split('T')[0]}.json`;\n      a.style.display = \"none\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Export Complete\",\n        description: \"Your data has been exported successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export your data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleImportData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = JSON.parse(e.target?.result as string);\n        setIsImporting(true);\n        importDataMutation.mutate(data);\n      } catch (error) {\n        toast({\n          title: \"Import Failed\",\n          description: \"Invalid file format. Please select a valid export file.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleEditInvestmentType = (type: InvestmentType) => {\n    setEditingInvestmentType(type);\n    investmentTypeForm.reset({\n      name: type.name,\n      isDefault: type.isDefault,\n    });\n    setIsAddInvestmentTypeOpen(true);\n  };\n\n  const handleEditBillCategory = (category: BillCategory) => {\n    setEditingBillCategory(category);\n    billCategoryForm.reset({\n      name: category.name,\n      isDefault: category.isDefault,\n    });\n    setIsAddBillCategoryOpen(true);\n  };\n\n  const handleDeleteInvestmentType = (id: string, name: string, isDefault: boolean) => {\n    if (isDefault) {\n      toast({\n        title: \"Cannot Delete\",\n        description: \"Default investment types cannot be deleted.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deleteInvestmentTypeMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteBillCategory = (id: string, name: string, isDefault: boolean) => {\n    if (isDefault) {\n      toast({\n        title: \"Cannot Delete\",\n        description: \"Default bill categories cannot be deleted.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (window.confirm(`Are you sure you want to delete \"${name}\"?`)) {\n      deleteBillCategoryMutation.mutate(id);\n    }\n  };\n\n  const onSubmitInvestmentType = (data: z.infer<typeof investmentTypeSchema>) => {\n    if (editingInvestmentType) {\n      updateInvestmentTypeMutation.mutate({ id: editingInvestmentType.id, data });\n    } else {\n      createInvestmentTypeMutation.mutate(data);\n    }\n  };\n\n  const onSubmitBillCategory = (data: z.infer<typeof billCategorySchema>) => {\n    if (editingBillCategory) {\n      updateBillCategoryMutation.mutate({ id: editingBillCategory.id, data });\n    } else {\n      createBillCategoryMutation.mutate(data);\n    }\n  };\n\n  const closeInvestmentTypeModal = () => {\n    setIsAddInvestmentTypeOpen(false);\n    setEditingInvestmentType(null);\n    investmentTypeForm.reset();\n  };\n\n  const closeBillCategoryModal = () => {\n    setIsAddBillCategoryOpen(false);\n    setEditingBillCategory(null);\n    billCategoryForm.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Settings</h2>\n          <p className=\"text-muted-foreground mt-1\">Manage your account and application preferences</p>\n        </div>\n\n        <Tabs defaultValue=\"customization\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"customization\" data-testid=\"tab-customization\">\n              <Tags className=\"mr-2\" size={16} />\n              Customization\n            </TabsTrigger>\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n              <User className=\"mr-2\" size={16} />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n              <Bell className=\"mr-2\" size={16} />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"investments\" data-testid=\"tab-investments\">\n              <TrendingUp className=\"mr-2\" size={16} />\n              Investments\n            </TabsTrigger>\n            <TabsTrigger value=\"data\" data-testid=\"tab-data\">\n              <Database className=\"mr-2\" size={16} />\n              Data\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Customization Settings */}\n          <TabsContent value=\"customization\">\n            <div className=\"space-y-6\">\n              {/* Investment Types */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <TrendingUp className=\"mr-2\" size={20} />\n                      Investment Types\n                    </span>\n                    <Button \n                      onClick={() => setIsAddInvestmentTypeOpen(true)}\n                      size=\"sm\"\n                      data-testid=\"button-add-investment-type\"\n                    >\n                      <Plus className=\"mr-2\" size={16} />\n                      Add Type\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Manage your custom investment types. These will appear in the Investment section dropdowns.\n                  </p>\n                  \n                  {investmentTypesLoading ? (\n                    <div className=\"space-y-3\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded animate-pulse\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {investmentTypes?.map((type) => (\n                        <div \n                          key={type.id} \n                          className=\"flex items-center justify-between p-3 border rounded-lg\"\n                          data-testid={`investment-type-${type.id}`}\n                        >\n                          <div>\n                            <p className=\"font-medium text-foreground\">{type.name}</p>\n                            {type.isDefault && (\n                              <p className=\"text-xs text-muted-foreground\">Default type</p>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditInvestmentType(type)}\n                              data-testid={`button-edit-investment-type-${type.id}`}\n                            >\n                              <Edit size={16} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteInvestmentType(type.id, type.name, type.isDefault)}\n                              disabled={type.isDefault}\n                              data-testid={`button-delete-investment-type-${type.id}`}\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Bill Categories */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <FolderOpen className=\"mr-2\" size={20} />\n                      Bill Categories\n                    </span>\n                    <Button \n                      onClick={() => setIsAddBillCategoryOpen(true)}\n                      size=\"sm\"\n                      data-testid=\"button-add-bill-category\"\n                    >\n                      <Plus className=\"mr-2\" size={16} />\n                      Add Category\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Manage your custom bill categories. These will appear in the Bills section dropdowns.\n                  </p>\n                  \n                  {billCategoriesLoading ? (\n                    <div className=\"space-y-3\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded animate-pulse\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {billCategories?.map((category) => (\n                        <div \n                          key={category.id} \n                          className=\"flex items-center justify-between p-3 border rounded-lg\"\n                          data-testid={`bill-category-${category.id}`}\n                        >\n                          <div>\n                            <p className=\"font-medium text-foreground\">{category.name}</p>\n                            {category.isDefault && (\n                              <p className=\"text-xs text-muted-foreground\">Default category</p>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditBillCategory(category)}\n                              data-testid={`button-edit-bill-category-${category.id}`}\n                            >\n                              <Edit size={16} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteBillCategory(category.id, category.name, category.isDefault)}\n                              disabled={category.isDefault}\n                              data-testid={`button-delete-bill-category-${category.id}`}\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Data Management */}\n          <TabsContent value=\"data\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Database className=\"mr-2\" size={20} />\n                  Data Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium text-foreground\">Export & Import</h4>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Export Data</Label>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Download all your financial data including investments, bills, and custom categories.\n                      </p>\n                      <Button \n                        onClick={handleExportData}\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid=\"button-export-data\"\n                      >\n                        <Download className=\"mr-2\" size={16} />\n                        Export All Data\n                      </Button>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Import Data</Label>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Import financial data from a previously exported file.\n                      </p>\n                      <div className=\"w-full\">\n                        <Input\n                          type=\"file\"\n                          accept=\".json\"\n                          onChange={handleImportData}\n                          disabled={isImporting}\n                          className=\"hidden\"\n                          id=\"import-file\"\n                        />\n                        <Label\n                          htmlFor=\"import-file\"\n                          className=\"inline-flex items-center justify-center w-full px-4 py-2 text-sm font-medium transition-colors border border-input bg-background hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md\"\n                          data-testid=\"button-import-data\"\n                        >\n                          <Upload className=\"mr-2\" size={16} />\n                          {isImporting ? \"Importing...\" : \"Import Data\"}\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-2 p-4 bg-muted rounded-lg\">\n                    <AlertCircle className=\"text-muted-foreground mt-0.5\" size={16} />\n                    <div className=\"text-sm text-muted-foreground\">\n                      <p className=\"font-medium mb-1\">Important Notes:</p>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        <li>Exported data includes all investments, bills, payments, and custom types</li>\n                        <li>Import will add to existing data, not replace it</li>\n                        <li>Default investment types and bill categories are not included in exports</li>\n                        <li>Keep your export files secure as they contain sensitive financial information</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Profile Settings - Keep existing */}\n          <TabsContent value=\"profile\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"mr-2\" size={20} />\n                  Profile Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input \n                      id=\"firstName\"\n                      value={profileSettings.firstName}\n                      onChange={(e) => setProfileSettings({...profileSettings, firstName: e.target.value})}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input \n                      id=\"lastName\"\n                      value={profileSettings.lastName}\n                      onChange={(e) => setProfileSettings({...profileSettings, lastName: e.target.value})}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input \n                    id=\"email\"\n                    type=\"email\"\n                    value={profileSettings.email}\n                    onChange={(e) => setProfileSettings({...profileSettings, email: e.target.value})}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input \n                    id=\"phone\"\n                    value={profileSettings.phone}\n                    onChange={(e) => setProfileSettings({...profileSettings, phone: e.target.value})}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <Button onClick={handleSaveProfile} data-testid=\"button-save-profile\">\n                  <Save className=\"mr-2\" size={16} />\n                  Save Profile\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings - Keep existing */}\n          <TabsContent value=\"notifications\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"mr-2\" size={20} />\n                  Notification Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Mail className=\"text-muted-foreground\" size={20} />\n                      <div>\n                        <p className=\"text-sm font-medium\">Email Notifications</p>\n                        <p className=\"text-xs text-muted-foreground\">Receive updates via email</p>\n                      </div>\n                    </div>\n                    <Switch \n                      checked={notificationSettings.emailNotifications}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, emailNotifications: checked})}\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Bell className=\"text-muted-foreground\" size={20} />\n                      <div>\n                        <p className=\"text-sm font-medium\">Push Notifications</p>\n                        <p className=\"text-xs text-muted-foreground\">Receive browser notifications</p>\n                      </div>\n                    </div>\n                    <Switch \n                      checked={notificationSettings.pushNotifications}\n                      onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, pushNotifications: checked})}\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n                </div>\n\n                <Button onClick={handleSaveNotifications} data-testid=\"button-save-notifications\">\n                  <Save className=\"mr-2\" size={16} />\n                  Save Notification Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Investment Settings - Keep existing */}\n          <TabsContent value=\"investments\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"mr-2\" size={20} />\n                  Investment Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"riskTolerance\">Risk Tolerance</Label>\n                    <Select value={investmentSettings.riskTolerance} onValueChange={(value) => setInvestmentSettings({...investmentSettings, riskTolerance: value})}>\n                      <SelectTrigger data-testid=\"select-risk-tolerance\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"conservative\">Conservative</SelectItem>\n                        <SelectItem value=\"moderate\">Moderate</SelectItem>\n                        <SelectItem value=\"aggressive\">Aggressive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"defaultReturnRate\">Default Expected Return (%)</Label>\n                    <Input \n                      id=\"defaultReturnRate\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={investmentSettings.defaultReturnRate}\n                      onChange={(e) => setInvestmentSettings({...investmentSettings, defaultReturnRate: e.target.value})}\n                      data-testid=\"input-default-return-rate\"\n                    />\n                  </div>\n                </div>\n\n                <Button onClick={handleSaveInvestments} data-testid=\"button-save-investments\">\n                  <Save className=\"mr-2\" size={16} />\n                  Save Investment Settings\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      {/* Add Investment Type Modal */}\n      <Dialog open={isAddInvestmentTypeOpen} onOpenChange={closeInvestmentTypeModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingInvestmentType ? \"Edit Investment Type\" : \"Add Investment Type\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...investmentTypeForm}>\n            <form onSubmit={investmentTypeForm.handleSubmit(onSubmitInvestmentType)} className=\"space-y-4\">\n              <FormField\n                control={investmentTypeForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-investment-type-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={closeInvestmentTypeModal}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createInvestmentTypeMutation.isPending || updateInvestmentTypeMutation.isPending}\n                  data-testid=\"button-submit-investment-type\"\n                >\n                  {editingInvestmentType ? \"Update\" : \"Create\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Bill Category Modal */}\n      <Dialog open={isAddBillCategoryOpen} onOpenChange={closeBillCategoryModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingBillCategory ? \"Edit Bill Category\" : \"Add Bill Category\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...billCategoryForm}>\n            <form onSubmit={billCategoryForm.handleSubmit(onSubmitBillCategory)} className=\"space-y-4\">\n              <FormField\n                control={billCategoryForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-bill-category-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={closeBillCategoryModal}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createBillCategoryMutation.isPending || updateBillCategoryMutation.isPending}\n                  data-testid=\"button-submit-bill-category\"\n                >\n                  {editingBillCategory ? \"Update\" : \"Create\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":34587},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}